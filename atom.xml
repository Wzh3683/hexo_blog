<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WZH的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.okwzh.cn/"/>
  <updated>2020-06-17T14:23:56.475Z</updated>
  <id>http://www.okwzh.cn/</id>
  
  <author>
    <name>王增辉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;hexo博客美化二&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/17/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%BA%8C/"/>
    <id>http://www.okwzh.cn/2020/06/17/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%BA%8C/</id>
    <published>2020-06-17T13:59:40.000Z</published>
    <updated>2020-06-17T14:23:56.475Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经讲过hexo博客的美化，这是继续更新的。</p><a id="more"></a><h3 id="1-添加背景音乐"><a href="#1-添加背景音乐" class="headerlink" title="1.添加背景音乐"></a>1.添加背景音乐</h3><p>打开<a href="https://music.163.com/" target="_blank" rel="noopener">网页版网易云音乐</a>，选择你准备添加的背景音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，复制底下的HTML代码<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%B8%80.png" alt="添加背景音乐一"><br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%BA%8C.png" alt="添加背景音乐二"><br>然后将此代码放到你想要放的地方，比如放在博客的尾部，则打开 \themes\layout_partial\footer.ejs 文件，将复制的HTML代码粘贴进去，再进行适当的位置设置让播放器更美观，其中 auto=1 表示打开网页自动播放音乐，auto=0 表示关闭自动播放音乐</p><p>加载页面，最终展示效果<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%B8%89.png" alt="背景音乐展示效果"></p><h3 id="2-添加地图仪"><a href="#2-添加地图仪" class="headerlink" title="2.添加地图仪"></a>2.添加地图仪</h3><p>它提供网站访客地理信息，可以以2D、3D等形式显示<br><a href="http://www.revolvermaps.com/" target="_blank" rel="noopener">小地球仪</a></p><p><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%B8%80.png" alt="选择自己喜欢的小地图仪"><br>复制代码放到自己想放的地方，比如放在博客的尾部，则打开 \themes\layout_partial\footer.ejs 文件，将复制的HTML代码粘贴进去。<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%BA%8C.png" alt="添加小地图仪二"></p><p>加载页面最终实现效果：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%B8%89.png" alt="最终展示效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面已经讲过hexo博客的美化，这是继续更新的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.okwzh.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.okwzh.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>&#39;paypal跨境支付&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/17/paypal%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98/"/>
    <id>http://www.okwzh.cn/2020/06/17/paypal%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98/</id>
    <published>2020-06-17T02:00:58.000Z</published>
    <updated>2020-06-17T12:55:46.511Z</updated>
    
    <content type="html"><![CDATA[<p>在公司中，支付是必不可缺的的重要系统之一。有的公司如果涉及到境外支付，就一定听说过或使用说PayPal。<br>PayPal支付的优势就是其业务网络遍布全球。目前PayPal的庞大网络覆盖了全球200多个国家，可提供20多种语言服务，并接受100多种货币付款和56种货币提现。同时，还允许在账户中持有25种货币余额。换句话说，只要付款人拥有一个PayPal账户，他就拥有了在200多个国家进行电子支付购物，并在需要服务的时候享受到母语支持的各种便捷服务。</p><a id="more"></a><p>注册PayPal官网账号：<a href="https://www.paypal.com" target="_blank" rel="noopener">https://www.paypal.com</a><br>PayPal开发者平台：<a href="https://developer.paypal.com/developer/accounts/" target="_blank" rel="noopener">https://developer.paypal.com/developer/accounts/</a></p><p>注册成功之后，进去PayPal沙盒应用：<a href="https://developer.paypal.com/developer/accounts/" target="_blank" rel="noopener">https://developer.paypal.com/developer/accounts/</a><br>然后PayPal会默认给我们创建两个账号，一个是商家的，一个是个户的。当然也可以点击Create account自己创建需要的账号<br><img src="/img/%E6%94%AF%E4%BB%98/%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7.png" alt="分配的默认账号"></p><h3 id="支付业务"><a href="#支付业务" class="headerlink" title="支付业务"></a>支付业务</h3><p>以个人账户对商户进行支付业务。</p><p>应用管理页面：<a href="https://developer.paypal.com/developer/applications/" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications/</a></p><p>这时我们可以发现他给我们默认分配了应用。<br><img src="/img/%E6%94%AF%E4%BB%98/%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8.png" alt="分配的默认应用"></p><p>点击我们的默认应用，我们可以发现应用的client_id和client_secret。<br><img src="/img/%E6%94%AF%E4%BB%98/client_ID.png" alt="应用的ID和Secret"></p><p>进入我们的账号设置<br><img src="/img/%E6%94%AF%E4%BB%98/%E8%BF%9B%E5%85%A5%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE.png" alt="进入账号设置"></p><p>可以得知我们的个人账号和账号密码<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81.png" alt="个人账号和面膜"></p><p>修改我们个人账号的金额，让我们有足以的价格进行购买测试<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E6%88%B7%E9%87%91%E9%A2%9D.png" alt="修改个人账户金额"></p><h3 id="进行购买测试"><a href="#进行购买测试" class="headerlink" title="进行购买测试"></a>进行购买测试</h3><p>安装PayPal在python的sdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paypalrestsdk</span><br></pre></td></tr></table></figure><p>在djagno中新建一个支付视图views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">url:</span><br><span class="line">    path(<span class="string">'pay/'</span>,payment),<span class="comment">#跳转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paypalrestsdk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payment</span><span class="params">(request)</span>:</span></span><br><span class="line">    paypalrestsdk.configure(&#123;</span><br><span class="line">  <span class="string">"mode"</span>: <span class="string">"sandbox"</span>, <span class="comment"># sandbox代表沙盒</span></span><br><span class="line">  <span class="string">"client_id"</span>: <span class="string">"你的client_id"</span>,</span><br><span class="line">  <span class="string">"client_secret"</span>: <span class="string">"你的client_secret"</span> &#125;)</span><br><span class="line"></span><br><span class="line">    payment = paypalrestsdk.Payment(&#123;</span><br><span class="line">        <span class="string">"intent"</span>: <span class="string">"sale"</span>,</span><br><span class="line">        <span class="string">"payer"</span>: &#123;</span><br><span class="line">            <span class="string">"payment_method"</span>: <span class="string">"paypal"</span>&#125;,</span><br><span class="line">        <span class="string">"redirect_urls"</span>: &#123;</span><br><span class="line">            <span class="string">"return_url"</span>: <span class="string">"http://localhost:8000/palpay/pay/"</span>,<span class="comment">#支付成功跳转页面</span></span><br><span class="line">            <span class="comment"># "return_url": "http://localhost:8000/palpay/pay/?"+'order='+str(snoworder)+'&amp;uid='+str(uid) #进行加参，到修改</span></span><br><span class="line">            <span class="string">"cancel_url"</span>: <span class="string">"http://localhost:3000/paypal/cancel/"</span>&#125;,<span class="comment">#取消支付页面</span></span><br><span class="line">        <span class="string">"transactions"</span>: [&#123;</span><br><span class="line">            <span class="string">"amount"</span>: &#123;</span><br><span class="line">                <span class="string">"total"</span>: <span class="string">"5.00"</span>,</span><br><span class="line">                <span class="string">"currency"</span>: <span class="string">"USD"</span>&#125;,</span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"这是一个订单测试"</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payment.create():</span><br><span class="line">        print(<span class="string">"Payment created successfully"</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> payment.links:</span><br><span class="line">            <span class="keyword">if</span> link.rel == <span class="string">"approval_url"</span>:</span><br><span class="line">                approval_url = str(link.href)</span><br><span class="line">                print(<span class="string">"Redirect for approval: %s"</span> % (approval_url))</span><br><span class="line">                <span class="keyword">return</span> redirect(approval_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(payment.error)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"支付失败"</span>)</span><br></pre></td></tr></table></figure><p>这里解释一下重点参数，return_url是支付成功后回调的页面，paypal会将一个支付者id回传，然后服务端需要验证支付才能真的完成支付，total是付款金额，精确到分，currency是币种，支持多钟类型的货币。</p><p>当Django的服务端创建好支付订单后，重定向到paypal的沙盒环境，这时候一定要使用沙盒的个人账号进行登录和支付。<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%BB%98%E6%AC%BE.png" alt="paypal支付订单"><br>支付完成后，会跳回刚刚传过去的回调页面：<a href="http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ" target="_blank" rel="noopener">http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ</a>  </p><p>这里paypal会传过来三个参数，支付id,token和支付者id,然后因为我要修改参数，所以我对回调网址进行加参，</p><p>此时，在回调方法里，我们需要通过支付者id进行确认验证支付</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">url:</span><br><span class="line">    path(<span class="string">'palpay/pay/'</span>,payment_execute),<span class="comment">#成功回调</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payment_execute</span><span class="params">(request)</span>:</span></span><br><span class="line">    paymentid = request.GET.get(<span class="string">"paymentId"</span>) <span class="comment">#支付id</span></span><br><span class="line">    payerid = request.GET.get(<span class="string">"PayerID"</span>)  <span class="comment">#支付者id</span></span><br><span class="line">    order = request.GET.get(<span class="string">'order'</span>) <span class="comment">#获取订单</span></span><br><span class="line">    uid = request.GET.get(<span class="string">'uid'</span>)<span class="comment">#获取用户id</span></span><br><span class="line">    print(<span class="string">'订单ID:%s,支付者ID:%s，雪花订单号:%s,uid:%s'</span>%(paymentid,payerid,order,uid))</span><br><span class="line"></span><br><span class="line">    payment = paypalrestsdk.Payment.find(paymentid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payment.execute(&#123;<span class="string">"payer_id"</span>: payerid&#125;):</span><br><span class="line">        <span class="keyword">if</span> order <span class="keyword">and</span> payerid <span class="keyword">and</span> paymentid:</span><br><span class="line">            order_end = int(order[<span class="number">-1</span>])</span><br><span class="line">            print(<span class="string">'订单号最后一位'</span>,order_end)</span><br><span class="line">            <span class="keyword">if</span> int(order_end) &lt; <span class="number">5</span> <span class="keyword">or</span> int(uid[<span class="number">-1</span>]) &lt; <span class="number">5</span>:</span><br><span class="line">                order = OrderOne.objects.filter(order=order).first()</span><br><span class="line">                order.status = <span class="number">2</span></span><br><span class="line">                order.save()</span><br><span class="line">                print(<span class="string">"修改一表订单状态成功"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/myorder/'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                order = OrderTwo.objects.filter(order=order).first()</span><br><span class="line">                order.status = <span class="number">2</span></span><br><span class="line">                order.save()</span><br><span class="line">                print(<span class="string">"修改二表订单状态成功"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/myorder/'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'未获取到单号，请重新购买'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(payment.error) <span class="comment"># Error Hash</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"支付失败"</span>)</span><br></pre></td></tr></table></figure><p>这时再看我们的个人账户页面，发现已经扣款成功，说明整个流程已经走完。<br><img src="/img/%E6%94%AF%E4%BB%98/%E8%B4%AD%E4%B9%B0%E4%B9%8B%E5%90%8E%E4%BB%B7%E6%A0%BC.png" alt="购买成功扣款"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个支付流程相对支付宝来说，更加的紧凑，但是做支付安全是第一要务，就个人体验（仅是个人体验）层面来说，支付宝在安全方面做的还是要比Paypal略强一些，起码在信用卡欺诈和盗刷方面风控做的更好，在风险保障和赔付方面都有提供保险，当然由于金融环境的差异较大，并不是说Paypal的风控做的不好，只是机制不同，在国外，如果持卡人的信用卡被盗刷，一般发卡组织会让商家去承担责任，而国内只能在交易环节设置更多的验证，本质上说是要持卡人承担责任。这也是为什么支付宝的风控看起来更好的原因。</p><p>最后就是关于费率问题，Paypal官方给出的费率是每笔交易收取3.9%+$0.3（根据你的交易流水，比例可以优惠，具体下限看接入者的月营业额度），不过这可是美刀，不得不说这个费率是相当的高，但是国内做境外支付的电商，一般还是要接入Paypal作为支付方式。支付宝的费率基本上在1.2%左右，具体的费率也看交易流水，有实力的下限可以做到基本没有，单纯的看费率似乎支付宝更有优势，但是别忘记了，这样对比是不科学的，因为凡是接入Paypal的都是看中覆盖外币业务的地区，费率则是投资人该考虑的问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司中，支付是必不可缺的的重要系统之一。有的公司如果涉及到境外支付，就一定听说过或使用说PayPal。&lt;br&gt;PayPal支付的优势就是其业务网络遍布全球。目前PayPal的庞大网络覆盖了全球200多个国家，可提供20多种语言服务，并接受100多种货币付款和56种货币提现。同时，还允许在账户中持有25种货币余额。换句话说，只要付款人拥有一个PayPal账户，他就拥有了在200多个国家进行电子支付购物，并在需要服务的时候享受到母语支持的各种便捷服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="支付" scheme="http://www.okwzh.cn/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="django" scheme="http://www.okwzh.cn/tags/django/"/>
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="支付" scheme="http://www.okwzh.cn/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>&#39;hexo博客美化一&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/16/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%B8%80/"/>
    <id>http://www.okwzh.cn/2020/06/16/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%B8%80/</id>
    <published>2020-06-16T13:31:29.000Z</published>
    <updated>2020-06-17T14:00:01.647Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述的是添加博客美化的样式<br>请注意：不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！</p><p>博客美化前提条件：有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。</p><a id="more"></a><p>博客美化通用步骤：选定主题，认真阅读主题文档，分析主题目录结构，了解每个文件是对应网页哪个部分的，认真阅读美化教程，美化教程本质上只为你提供核心代码和思路，具体代码要添加到哪个地方，需要你自己搞懂主题结构，添加到需要的、合适的位置！</p><p>博客美化终极奥秘：创作第一，体验第二，避免繁杂，简洁为上！</p><h3 id="1-添加卡通人物"><a href="#1-添加卡通人物" class="headerlink" title="1.添加卡通人物"></a>1.添加卡通人物</h3><p>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！点击此处进入该<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">项目地址</a></p><p>获取live2d依赖库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可，更多模型选择请<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">点击此处</a>，各个模型的预览请访问<a href="https://eyhn.in/" target="_blank" rel="noopener">原作者的博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename(模型名称)</span><br></pre></td></tr></table></figure><p>打开站点目录下的 _config.yml 文件，添加如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-haruto #模型选择</span><br><span class="line">  display:</span><br><span class="line">    position: right  #模型位置</span><br><span class="line">    width: 150       #模型宽度</span><br><span class="line">    height: 300      #模型高度</span><br><span class="line">  mobile:</span><br><span class="line">    show: false      #是否在手机端显示</span><br></pre></td></tr></table></figure><p>设置好过后我们就拥有了一个卡通人物<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%8A%A8%E6%BC%AB%E5%8D%A1%E9%80%9A%E4%BA%BA%E7%89%A9.png" alt="动漫卡通人物"></p><h3 id="2-添加鼠标点击爱心效果"><a href="#2-添加鼠标点击爱心效果" class="headerlink" title="2.添加鼠标点击爱心效果"></a>2.添加鼠标点击爱心效果</h3><p>在 \themes\source\js 下新建文件 love.js，在 love.js 文件中添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>在 \themes\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/love.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再次加载页面我们就可以看到点击爱心的特效了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E7%89%B9%E6%95%88.png" alt="点击爱心特效"></p><h3 id="3-添加鼠标点击显示字体效果"><a href="#3-添加鼠标点击显示字体效果" class="headerlink" title="3.添加鼠标点击显示字体效果"></a>3.添加鼠标点击显示字体效果</h3><p>在 \themes\source\js 下新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标点击特效，文字特效</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">        (<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">"z-index"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">"left"</span>: x,</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">            <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#FF0000"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">"body"</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="number">3000</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="string">'delay()'</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".buryit"</span>).removeAttr(<span class="string">"onclick"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以根据自己喜欢然后替换为其他文字</p><p>如果想要每次点击显示的文字为不同颜色，可以将其中 color 值进行如下更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>: <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/click_show_text.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当再次加载页面之后，就可以看到好看的字体特效了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%AD%97%E4%BD%93%E7%89%B9%E6%95%88.png" alt="点击字体特效"></p><h3 id="4-添加鼠标点击烟花爆炸效果"><a href="#4-添加鼠标点击烟花爆炸效果" class="headerlink" title="4.添加鼠标点击烟花爆炸效果"></a>4.添加鼠标点击烟花爆炸效果</h3><p>在 \themes\source\js 目录下新建一个 fireworks.js 的文件，里面写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;&lt;<span class="regexp">/canvas&gt; </span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span><span class="comment">//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; </span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/fireworks.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再次加载页面之后，我们的网站就有鼠标点击烟花爆炸效果了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%82%B9%E5%87%BB%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C.png" alt="鼠标点击爆炸效果"></p><h3 id="5-添加彩色滚动变换字体"><a href="#5-添加彩色滚动变换字体" class="headerlink" title="5.添加彩色滚动变换字体"></a>5.添加彩色滚动变换字体</h3><p>在你想要添加彩色滚动变换字体的地方写入以下代码即可，其中文字可自行更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"binft"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var binft = function (r) &#123;</span></span><br><span class="line"><span class="regexp">      function t() &#123;</span></span><br><span class="line"><span class="regexp">        return b[Math.floor(Math.random() * b.length)]</span></span><br><span class="line"><span class="regexp">      &#125;  </span></span><br><span class="line"><span class="regexp">      function e() &#123;</span></span><br><span class="line"><span class="regexp">        return String.fromCharCode(94 * Math.random() + 33)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      function n(r) &#123;</span></span><br><span class="line"><span class="regexp">        for (var n = document.createDocumentFragment(), i = 0; r &gt; i; i++) &#123;</span></span><br><span class="line"><span class="regexp">          var l = document.createElement("span");</span></span><br><span class="line"><span class="regexp">          l.textContent = e(), l.style.color = t(), n.appendChild(l)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return n</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      function i() &#123;</span></span><br><span class="line"><span class="regexp">        var t = o[c.skillI];</span></span><br><span class="line"><span class="regexp">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= 0 &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP &gt; 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      var l = "",</span></span><br><span class="line"><span class="regexp">      o = ["青青陵上柏，磊磊涧中石。", "人生天地间，忽如远行客。","斗酒相娱乐，聊厚不为薄。", "驱车策驽马，游戏宛与洛。","洛中何郁郁，冠带自相索。","长衢罗夹巷，王侯多第宅。","两宫遥相望，双阙百余尺。","极宴娱心意，戚戚何所迫？"].map(function (r) &#123;</span></span><br><span class="line"><span class="regexp">      return r + ""</span></span><br><span class="line"><span class="regexp">      &#125;),</span></span><br><span class="line"><span class="regexp">      a = 2,</span></span><br><span class="line"><span class="regexp">      g = 1,</span></span><br><span class="line"><span class="regexp">      s = 5,</span></span><br><span class="line"><span class="regexp">      d = 75,</span></span><br><span class="line"><span class="regexp">      b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"],</span></span><br><span class="line"><span class="regexp">      c = &#123;</span></span><br><span class="line"><span class="regexp">        text: "",</span></span><br><span class="line"><span class="regexp">        prefixP: -s,</span></span><br><span class="line"><span class="regexp">        skillI: 0,</span></span><br><span class="line"><span class="regexp">        skillP: 0,</span></span><br><span class="line"><span class="regexp">        direction: "forward",</span></span><br><span class="line"><span class="regexp">        delay: a,</span></span><br><span class="line"><span class="regexp">        step: g</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">      i()</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">      binft(document.getElementById('binft'));</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>加载页面最终显示效果为：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%BD%A9%E8%89%B2%E6%BB%9A%E5%8A%A8%E5%8F%98%E6%8D%A2%E5%AD%97%E4%BD%93.gif" alt="彩色滚动变换字体"></p><h3 id="6-添加网站运行时间"><a href="#6-添加网站运行时间" class="headerlink" title="6.添加网站运行时间"></a>6.添加网站运行时间</h3><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 \themes\layout_partial\footer.ejs 文件下添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"timeDate"</span>&gt;载入天数...&lt;<span class="regexp">/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"08/10/2018 17:38:00"</span>);<span class="comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>加载页面，展示效果如下：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E5%A4%A9%E6%95%B0.png" alt="网站运行天数"></p><h3 id="7-浏览器网页标题恶搞"><a href="#7-浏览器网页标题恶搞" class="headerlink" title="7.浏览器网页标题恶搞"></a>7.浏览器网页标题恶搞</h3><p>当用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 \themes\source\js 下新建一个 FunnyTitle.js 文件，在里面填写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/funny.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~'</span> + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 funny.ico 是用户切换到其他标签后你网站的图标，favicon.ico 是正常图标，然后在 \themes\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/FunnyTitle.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们在再次重新加载页面就可以看到:<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%A0%87%E9%A2%98%E6%81%B6%E6%90%9E.png" alt="浏览器恶搞标题"></p><h3 id="8-背景添加动态线条效果"><a href="#8-背景添加动态线条效果" class="headerlink" title="8.背景添加动态线条效果"></a>8.背景添加动态线条效果</h3><p>在 \themes\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"220,220,220"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"200"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>opacity：表示线条透明度（0~1），默认：0.5<br>count：表示线条的总数量，默认：150<br>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p><p>加载页面，展示效果如下：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E8%83%8C%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E7%BA%BF%E6%9D%A1%E6%95%88%E6%9E%9C.png" alt="添加动态线条效果"></p><h3 id="9-添加网站雪花飘落效果"><a href="#9-添加网站雪花飘落效果" class="headerlink" title="9.添加网站雪花飘落效果"></a>9.添加网站雪花飘落效果</h3><p>雪花飘落由两个样式，可以选择自己喜欢的样式<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E9%9B%AA%E8%8A%B1%E6%A0%B7%E5%BC%8F%E4%B8%80.png" alt="雪花效果样式一"><br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E9%9B%AA%E8%8A%B1%E6%A0%B7%E5%BC%8F%E4%BA%8C.png" alt="雪花效果样式二"></p><p>实现方法：在 \themes\source\js 目录下新建一个 snow.js 文件，粘贴以下代码：</p><figure class="highlight js"><figcaption><span>样式一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css(&#123;<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>&#125;).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">documentWidth= $(<span class="built_in">document</span>).width(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">$flake.clone().appendTo(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">left: startPositionLeft,</span><br><span class="line">opacity: startOpacity,</span><br><span class="line"><span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">color: options.flakeColor</span><br><span class="line">&#125;).animate(&#123;</span><br><span class="line">top: endPositionTop,</span><br><span class="line">left: endPositionLeft,</span><br><span class="line">opacity: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).remove()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>样式二</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">        y = <span class="keyword">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="keyword">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.velY &lt;= <span class="keyword">this</span>.speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.step += <span class="number">.05</span>) * <span class="keyword">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= canvas.width || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= canvas.height || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes;</span><br><span class="line">    ctx = <span class="keyword">this</span>.ctx, canvas = <span class="keyword">this</span>.canvas, that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件里引用即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"\js\snow.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果没效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//libs.baidu.com/jquery/1.8.3/jquery.min.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://ihuan.me/2172.html" target="_blank" rel="noopener">《分享两种圣诞节雪花特效JS代码(网站下雪效果)》</a></p><h3 id="10-添加背景代码雨特效"><a href="#10-添加背景代码雨特效" class="headerlink" title="10.添加背景代码雨特效"></a>10.添加背景代码雨特效</h3><p>在 \themes\source\js 目录下新建一个 DigitalRain.js 的文件，里面写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取画布对象</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//获取画布的上下文</span></span><br><span class="line">    <span class="keyword">var</span> context =canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">window</span>.screen;</span><br><span class="line">    <span class="keyword">var</span> W = canvas.width = s.width;</span><br><span class="line">    <span class="keyword">var</span> H = canvas.height;</span><br><span class="line">    <span class="comment">//获取浏览器屏幕的宽度和高度</span></span><br><span class="line">    <span class="comment">//var W = window.innerWidth;</span></span><br><span class="line">    <span class="comment">//var H = window.innerHeight;</span></span><br><span class="line">    <span class="comment">//设置canvas的宽度和高度</span></span><br><span class="line">    canvas.width = W;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    <span class="comment">//每个文字的字体大小</span></span><br><span class="line">    <span class="keyword">var</span> fontSize = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//计算列</span></span><br><span class="line">    <span class="keyword">var</span> colunms = <span class="built_in">Math</span>.floor(W /fontSize);</span><br><span class="line">    <span class="comment">//记录每列文字的y轴坐标</span></span><br><span class="line">    <span class="keyword">var</span> drops = [];</span><br><span class="line">    <span class="comment">//给每一个文字初始化一个起始点的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运动的文字</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">"WELCOME TO WWW.ITRHX.COM"</span>;</span><br><span class="line">    <span class="comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span></span><br><span class="line">    <span class="comment">//绘画的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        context.fillStyle = <span class="string">"rgba(238,238,238,.08)"</span>;<span class="comment">//遮盖层</span></span><br><span class="line">        context.fillRect(<span class="number">0</span>,<span class="number">0</span>,W,H);</span><br><span class="line">        <span class="comment">//给字体设置样式</span></span><br><span class="line">        context.font = <span class="string">"600 "</span>+fontSize+<span class="string">"px  Georgia"</span>;</span><br><span class="line">        <span class="comment">//给字体添加颜色</span></span><br><span class="line">        context.fillStyle = [<span class="string">"#33B5E5"</span>, <span class="string">"#0099CC"</span>, <span class="string">"#AA66CC"</span>, <span class="string">"#9933CC"</span>, <span class="string">"#99CC00"</span>, <span class="string">"#669900"</span>, <span class="string">"#FFBB33"</span>, <span class="string">"#FF8800"</span>, <span class="string">"#FF4444"</span>, <span class="string">"#CC0000"</span>][<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)];<span class="comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span></span><br><span class="line">        <span class="comment">//写入画布中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length);</span><br><span class="line">            <span class="keyword">var</span> x = i*fontSize;</span><br><span class="line">            <span class="keyword">var</span> y = drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            <span class="comment">//如果要改变时间，肯定就是改变每次他的起点</span></span><br><span class="line">            <span class="keyword">if</span>(y &gt;= canvas.height &amp;&amp; <span class="built_in">Math</span>.random() &gt; <span class="number">0.99</span>)&#123;</span><br><span class="line">                drops[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randColor</span>(<span class="params"></span>)</span>&#123;<span class="comment">//随机颜色</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,<span class="number">35</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在主题文件的相关css文件中（在\themes\source\less_main.less 文件末尾）添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在\themes\layout\layout.ejs 文件中写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数字雨 --&gt;</span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"1440"</span> height=<span class="string">"900"</span> &gt;&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>/js/DigitalRain.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E8%83%8C%E6%99%AF%E4%BB%A3%E7%A0%81%E9%9B%A8.png" alt="背景代码雨"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述的是添加博客美化的样式&lt;br&gt;请注意：不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！&lt;/p&gt;
&lt;p&gt;博客美化前提条件：有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.okwzh.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.okwzh.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>&#39;结合js做md5加密&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/16/%E7%BB%93%E5%90%88js%E5%81%9Amd5%E5%8A%A0%E5%AF%86/"/>
    <id>http://www.okwzh.cn/2020/06/16/%E7%BB%93%E5%90%88js%E5%81%9Amd5%E5%8A%A0%E5%AF%86/</id>
    <published>2020-06-16T09:48:47.000Z</published>
    <updated>2020-06-16T10:21:35.374Z</updated>
    
    <content type="html"><![CDATA[<p>不管在前端还是后端，我们都会有一些简单的业务对数据进行加密处理，用来防止信息等被盗取，所以我们这里来使用md5加密。</p><h3 id="关于md5加密算法"><a href="#关于md5加密算法" class="headerlink" title="关于md5加密算法"></a>关于md5加密算法</h3><p>MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p><a id="more"></a><h3 id="md5依赖库"><a href="#md5依赖库" class="headerlink" title="md5依赖库"></a>md5依赖库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install js-md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># "js-md5": "^0.7.3",</span></span><br></pre></td></tr></table></figure><p>针对md5加密库，因为他不是热库，不需要经常被使用，所以不需要将它加入到main.js中。最好的结果是每次使用单独对他进行调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">'js-md5'</span></span><br></pre></td></tr></table></figure><h3 id="前端代码示例"><a href="#前端代码示例" class="headerlink" title="前端代码示例"></a>前端代码示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;total&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 7b7a53e239400a13bd6be6c91c4f6c4e --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">'js-md5'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        total:<span class="string">''</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件标签</span></span></span><br><span class="line">  components:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> num = <span class="string">'2020'</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.total = md5(num)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印结果:7b7a53e239400a13bd6be6c91c4f6c4e</p><h3 id="后端代码示例"><a href="#后端代码示例" class="headerlink" title="后端代码示例"></a>后端代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#前端num</span></span><br><span class="line">num = <span class="string">'2020'</span></span><br><span class="line"><span class="comment">#前端传的sign</span></span><br><span class="line">sign = <span class="string">"7b7a53e239400a13bd6be6c91c4f6c4e"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="comment">#组合要加密的字符串</span></span><br><span class="line">sign_str = num</span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line">mysign = str(sign_str).encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment">#设置加密</span></span><br><span class="line">md5.update(mysign)</span><br><span class="line">mysign = md5.hexdigest()</span><br><span class="line"><span class="comment">#判断</span></span><br><span class="line">print(mysign)</span><br><span class="line"><span class="keyword">if</span> sign == mysign:</span><br><span class="line">print(<span class="string">"签名一致"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"数据被篡改"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果：7b7a53e239400a13bd6be6c91c4f6c4e</span></span><br><span class="line"><span class="comment">#签名一致</span></span><br></pre></td></tr></table></figure><p>针对需要保密的信息，使用md5进行加密一下简直不要太完美。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管在前端还是后端，我们都会有一些简单的业务对数据进行加密处理，用来防止信息等被盗取，所以我们这里来使用md5加密。&lt;/p&gt;
&lt;h3 id=&quot;关于md5加密算法&quot;&gt;&lt;a href=&quot;#关于md5加密算法&quot; class=&quot;headerlink&quot; title=&quot;关于md5加密算法&quot;&gt;&lt;/a&gt;关于md5加密算法&lt;/h3&gt;&lt;p&gt;MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="js" scheme="http://www.okwzh.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>&#39;支付宝订单支付&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/16/%E6%94%AF%E4%BB%98%E5%AE%9D%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98/"/>
    <id>http://www.okwzh.cn/2020/06/16/%E6%94%AF%E4%BB%98%E5%AE%9D%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98/</id>
    <published>2020-06-16T08:39:30.000Z</published>
    <updated>2020-06-17T07:38:31.596Z</updated>
    
    <content type="html"><![CDATA[<p>现在所有的门户网站还是一下应用，都离不开第三方支付，我们今天讲一下第三方的支付接口也就是支付宝接口付款。<br>支付宝支付采用了RSA加密签名的安全通信机制，开发者可以通过支付宝的公钥验证消息的来源，同时使用自己的私钥进行信息加密。RSA算法及数字签名机制是服务窗平台与开发者网关安全通信的基础。</p><a id="more"></a><h3 id="支付宝付款流程图"><a href="#支付宝付款流程图" class="headerlink" title="支付宝付款流程图"></a>支付宝付款流程图</h3><p><img src="/img/%E6%94%AF%E4%BB%98/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E9%80%BB%E8%BE%91.png" alt="使用支付宝付款流程图"></p><h3 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h3><p>在使用支付宝支付的时候，我们就要使用到沙箱功能。<br>支付宝沙箱网址：<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>在沙箱应用中，我们需要记住自己的APPID,设置RSA2(SHA256)密钥<br>设置密钥官方文档：<a href="https://opendocs.alipay.com/open/291/105971#LDsXr" target="_blank" rel="noopener">https://opendocs.alipay.com/open/291/105971#LDsXr</a></p><p>根据文档生成自己的应用公钥和密钥。</p><h3 id="实现支付宝接口接入"><a href="#实现支付宝接口接入" class="headerlink" title="实现支付宝接口接入"></a>实现支付宝接口接入</h3><p>创建一个keys文件夹，存放alipay_public_2048.txt支付宝公钥和app_private_2048.txt应用私钥<br><img src="/img/%E6%94%AF%E4%BB%98/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E9%92%A5%E5%92%8C%E5%BA%94%E7%94%A8%E7%A7%81%E9%92%A5.png" alt="支付宝公钥和应用私钥"></p><p>文档地址：<a href="https://docs.open.alipay.com/api" target="_blank" rel="noopener">https://docs.open.alipay.com/api</a></p><p>根据文档写一个支付基类pay.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> decodebytes, encodebytes</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    支付宝支付接口(PC端支付接口)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, appid, app_notify_url, app_private_key_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 alipay_public_key_path, return_url, debug=False)</span>:</span></span><br><span class="line">        self.appid = appid</span><br><span class="line">        self.app_notify_url = app_notify_url</span><br><span class="line">        self.app_private_key_path = app_private_key_path</span><br><span class="line">        self.app_private_key = <span class="literal">None</span></span><br><span class="line">        self.return_url = return_url</span><br><span class="line">        <span class="keyword">with</span> open(self.app_private_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.app_private_key = RSA.importKey(fp.read())</span><br><span class="line">        self.alipay_public_key_path = alipay_public_key_path</span><br><span class="line">        <span class="keyword">with</span> open(self.alipay_public_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.alipay_public_key = RSA.importKey(fp.read())</span><br><span class="line">        <span class="comment">#debug=True为测试模式，false是上线模式</span></span><br><span class="line">        <span class="keyword">if</span> debug <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipaydev.com/gateway.do"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipay.com/gateway.do"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">direct_pay</span><span class="params">(self, subject, out_trade_no, total_amount, return_url=None, **kwargs)</span>:</span></span><br><span class="line">        biz_content = &#123;</span><br><span class="line">            <span class="string">"subject"</span>: subject,</span><br><span class="line">            <span class="string">"out_trade_no"</span>: out_trade_no,</span><br><span class="line">            <span class="string">"total_amount"</span>: total_amount,</span><br><span class="line">            <span class="string">"product_code"</span>: <span class="string">"FAST_INSTANT_TRADE_PAY"</span>,</span><br><span class="line">            <span class="comment"># "qr_pay_mode":4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        biz_content.update(kwargs)</span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.page.pay"</span>, biz_content, self.return_url)</span><br><span class="line">        <span class="keyword">return</span> self.sign_data(data)</span><br><span class="line">    <span class="comment">#构造参数体</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_body</span><span class="params">(self, method, biz_content, return_url=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"app_id"</span>: self.appid,</span><br><span class="line">            <span class="string">"method"</span>: method,</span><br><span class="line">            <span class="string">"charset"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line">            <span class="string">"sign_type"</span>: <span class="string">"RSA2"</span>,</span><br><span class="line">            <span class="string">"timestamp"</span>: datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>),</span><br><span class="line">            <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"biz_content"</span>: biz_content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> return_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data[<span class="string">"notify_url"</span>] = self.app_notify_url</span><br><span class="line">            data[<span class="string">"return_url"</span>] = self.return_url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment">#签名数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        data.pop(<span class="string">"sign"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        unsigned_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        sign = self.sign(unsigned_string.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># ordered_items = self.ordered_data(data)</span></span><br><span class="line">        quoted_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, quote_plus(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得最终的订单信息字符串</span></span><br><span class="line">        signed_string = quoted_string + <span class="string">"&amp;sign="</span> + quote_plus(sign)</span><br><span class="line">        <span class="keyword">return</span> signed_string</span><br><span class="line">    <span class="comment">#订单数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ordered_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        complex_keys = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">                complex_keys.append(key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字典类型的数据dump出来</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> complex_keys:</span><br><span class="line">            data[key] = json.dumps(data[key], separators=(<span class="string">','</span>, <span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted([(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self, unsigned_string)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.app_private_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        signature = signer.sign(SHA256.new(unsigned_string))</span><br><span class="line">        <span class="comment"># base64 编码，转换为unicode表示并移除回车</span></span><br><span class="line">        sign = encodebytes(signature).decode(<span class="string">"utf8"</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self, raw_content, signature)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.alipay_public_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        digest = SHA256.new()</span><br><span class="line">        digest.update(raw_content.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">if</span> signer.verify(digest, decodebytes(signature.encode(<span class="string">"utf8"</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(self, data, signature)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"sign_type"</span> <span class="keyword">in</span> data:</span><br><span class="line">            sign_type = data.pop(<span class="string">"sign_type"</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        message = <span class="string">"&amp;"</span>.join(<span class="string">u"&#123;&#125;=&#123;&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        <span class="keyword">return</span> self._verify(message, signature)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求退款接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">api_alipay_trade_refund</span><span class="params">(self,refund_amount,out_trade_no=None,trade_no=None,**kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造参数体</span></span><br><span class="line">        biz_content = &#123; <span class="string">"refund_amount"</span>:refund_amount&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#传递可选参数</span></span><br><span class="line">        biz_content.update(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#判断使用站外订单还是支付宝订单</span></span><br><span class="line">        <span class="keyword">if</span> out_trade_no:</span><br><span class="line">            biz_content[<span class="string">"out_trade_no"</span>] = out_trade_no</span><br><span class="line">        <span class="keyword">if</span> trade_no:</span><br><span class="line">            biz_content[<span class="string">"trade_no"</span>] = trade_no</span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造支付接口地址</span></span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.refund"</span>,biz_content)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造url</span></span><br><span class="line">        url = self.__gateway+<span class="string">"?"</span> + self.sign_data(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#请求接口</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        html = r.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><p>在视图定义方法使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">配置路由</span><br><span class="line">    path(<span class="string">'pay_url/'</span>,pay_url),<span class="comment">#支付宝跳转视图</span></span><br><span class="line">    path(<span class="string">'testpay/'</span>,back_url),<span class="comment">#会调地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="comment">#导入公共目录变量</span></span><br><span class="line"><span class="keyword">from</span> mydjango.settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment">#导入支付宝支付接口</span></span><br><span class="line"><span class="keyword">from</span> mydjango.pay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="comment">#引入支付宝沙箱秘钥</span></span><br><span class="line"><span class="comment">#应用私钥</span></span><br><span class="line">app_private_key_string = os.path.join(BASE_DIR,<span class="string">'keys/app_private_2048.txt'</span>)</span><br><span class="line"><span class="comment">#支付宝公钥</span></span><br><span class="line">alipay_public_key_string = os.path.join(BASE_DIR,<span class="string">'keys/alipay_public_2048.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立支付实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ali_object</span><span class="params">()</span>:</span></span><br><span class="line">    app_id = <span class="string">'你的沙箱应用ID'</span>  <span class="comment">#沙箱应用ID</span></span><br><span class="line">    <span class="comment">#支付完成后跳转的地址</span></span><br><span class="line">    return_url = <span class="string">'http://localhost:8000/testpay/'</span></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid = app_id,</span><br><span class="line">        app_notify_url = return_url,</span><br><span class="line">        return_url = return_url,</span><br><span class="line">        app_private_key_path = app_private_key_string,</span><br><span class="line">        alipay_public_key_path = alipay_public_key_string,</span><br><span class="line">        <span class="comment">#支付宝公钥,验证支付宝回传消息，不是自己公钥</span></span><br><span class="line">        debug=<span class="literal">True</span>,<span class="comment">#默认false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> alipay</span><br><span class="line"></span><br><span class="line"><span class="comment">#支付跳转视图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    alipay = get_ali_object()</span><br><span class="line">    <span class="comment">#生成支付的url</span></span><br><span class="line">    query_params = alipay.direct_pay(</span><br><span class="line">        subject=<span class="string">'test'</span>,<span class="comment">#商品简单描述</span></span><br><span class="line">        out_trade_no=<span class="string">'myorder'</span>+str(time.time()),<span class="comment">#订单号，这里使用的是时间戳来做</span></span><br><span class="line">        total_amount= <span class="number">100.00</span><span class="comment">#交易金额（单元：元 保留两位小数）</span></span><br><span class="line">    )</span><br><span class="line">    pay_url = <span class="string">'https://openapi.alipaydev.com/gateway.do?'</span> + query_params</span><br><span class="line">    <span class="keyword">return</span> redirect(pay_url)</span><br><span class="line">    <span class="comment"># return HttpResponse('123')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回调网址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'回调成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#回调url</span></span><br><span class="line"><span class="comment">#http://localhost:8080/myorder?charset=utf-8&amp;out_trade_no=4370479805276098561&amp;method=alipay.trade.page.pay.return&amp;total_amount=200.00&amp;sign=LCsKfD3ybvAlhzj1%2BJszACsy%2FeOL18p0A%2FmBIa68ZH2SUNb6163FWP5ScmyrGliBlmEtRVcVPkGASVLiY5l5ESTvFkx7OX3FO9%2FtqPRopSvhnf6jaaPjJt90YcG69Z9XZaqJHlK7LqCocLRKSXb4zxWDpek8QRrpUmkn9gxJgKr64Z7%2FlcjsZMpr1SxGjEhyMZp%2FbgcZfD8X4%2BiUkZThXB1LkKNhcRG5gHZTfoiEj%2FKxOFyH%2BNs4klXFjDTe5217UVMUAE351qfq0%2F%2FCXcZ3aHW52XobDAs12J6eVVtijUr8v2xD%2Bpp5SlgCBhkXt86euH4iVfLn61%2FCOMU7b3HLJQ%3D%3D&amp;trade_no=2020061622001482770501026654&amp;auth_app_id=2016092600603658&amp;version=1.0&amp;app_id=2016092600603658&amp;sign_type=RSA2&amp;seller_id=2088102177418159&amp;timestamp=2020-06-16%2013%3A27%3A16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回调网址中的参数</span></span><br><span class="line"><span class="comment"># out_trade_no=4370479805276098561  #订单号</span></span><br><span class="line"><span class="comment"># total_amount=200.00               #订单价格</span></span><br><span class="line"><span class="comment">#sign='LCsKfD3ybvAlhzj1%2BJszACsy%2FeOL18p0A%2FmBIa68ZH2SUNb6163FWP5ScmyrGliBlmEtRVcVPkGASVLiY5l5ESTvFkx7OX3FO9%2FtqPRopSvhnf6jaaPjJt90YcG69Z9XZaqJHlK7LqCocLRKSXb4zxWDpek8QRrpUmkn9gxJgKr64Z7%2FlcjsZMpr1SxGjEhyMZp%2FbgcZfD8X4%2BiUkZThXB1LkKNhcRG5gHZTfoiEj%2FKxOFyH%2BNs4klXFjDTe5217UVMUAE351qfq0%2F%2FCXcZ3aHW52XobDAs12J6eVVtijUr8v2xD%2Bpp5SlgCBhkXt86euH4iVfLn61%2FCOMU7b3HLJQ%3D%3D'#签名</span></span><br><span class="line"><span class="comment"># trade_no=2020061622001482770501026654 #支付宝订单号</span></span><br><span class="line"><span class="comment"># auth_app_id=2016092600603658  #应用ID</span></span><br><span class="line"><span class="comment"># version=1.0                     #版本</span></span><br><span class="line"><span class="comment"># sign_type='RSA2'                  #算法</span></span><br><span class="line"><span class="comment"># seller_id=2088102177418159    #支付者ID</span></span><br><span class="line"><span class="comment"># timestamp='2020-06-16%2013%3A27%3A16'#时间戳</span></span><br></pre></td></tr></table></figure><p>在沙箱账号中，有个买家和卖家账号，在使用沙箱做测试支付的时候，使用的是买家账号，账号密码还有登陆密码都有说明，还需要充值买家账号余额，这里的金钱都是虚拟的。这样就可以完成测试支付宝付款了。快去测试一波吧！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在所有的门户网站还是一下应用，都离不开第三方支付，我们今天讲一下第三方的支付接口也就是支付宝接口付款。&lt;br&gt;支付宝支付采用了RSA加密签名的安全通信机制，开发者可以通过支付宝的公钥验证消息的来源，同时使用自己的私钥进行信息加密。RSA算法及数字签名机制是服务窗平台与开发者网关安全通信的基础。&lt;/p&gt;
    
    </summary>
    
    
      <category term="支付" scheme="http://www.okwzh.cn/categories/%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="django" scheme="http://www.okwzh.cn/tags/django/"/>
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="支付" scheme="http://www.okwzh.cn/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>&#39;分布式ID雪花算法(snowflake)&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/14/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95-snowflake/"/>
    <id>http://www.okwzh.cn/2020/06/14/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95-snowflake/</id>
    <published>2020-06-14T09:43:19.000Z</published>
    <updated>2020-06-14T13:26:24.409Z</updated>
    
    <content type="html"><![CDATA[<p>唯一ID可以标识数据的唯一性，在分布式系统中生成唯一ID的方案有很多，常见的方式大概有以下三种：</p><p>依赖数据库，使用如MySQL自增列或Oracle序列等。<br><a href="https://okwzh.cn/2020/06/14/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/" target="_blank" rel="noopener">根据UUID生成</a><br>snowflake雪花算法</p><a id="more"></a><h3 id="为什么使用snowflake生成ID"><a href="#为什么使用snowflake生成ID" class="headerlink" title="为什么使用snowflake生成ID"></a>为什么使用snowflake生成ID</h3><p>使用uuid生成订单号这类东西也能凑合用，但是它有着罄竹难书的“罪行”：肉眼可见，它是无序的；长度是64位数字字母随机组合的字符串，占用空间巨大；完全不具备业务属性，也就是说使用uuid你完全无法推算出它到底是干嘛的；因为无序，所以趋势递增就更不用指望了；所以用uuid生成订单号就是自杀行为，适合它的是类似生成token令牌的场景。</p><p>雪花算法(snowflake)是Twitter开源的分布式ID生成算法，结果是一个long型的ID。为了满足Twitter每秒上万条消息的请求，每条消息都必须分配一条唯一的id，这些id还需要一些大致的顺序，让twitter可以通过一定的索引来进行检索，而在Twitter庞大的分布式系统中不同机器产生的id必须又必须不同。它的好处显而易见，不仅全局唯一，并且有序按时间递增，同时占用空间少，生成的id仅仅是19位的整形数字，正好契合mysql的bigint数据类型，简直完美。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号，最后还有一个符号位，永远是0。<br>组成：<br><img src="/img/%E7%AE%97%E6%B3%95/snowflake%E7%BB%84%E6%88%90.png" alt="snowflake组成"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。 毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。 可以根据自身业务特性分配bit位，非常灵活。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</p><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pysnowflake</span><br></pre></td></tr></table></figure><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snowflake_start_server --work&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AE%97%E6%B3%95/%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.png" alt="下载和启动服务"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定端口开启服务</span><br><span class="line">snowflake_start_server --work=<span class="number">1</span> --port=端口号</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AE%97%E6%B3%95/%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3.png" alt="指定端口"></p><h3 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">print(snowflake.client.get_stats())</span><br><span class="line"></span><br><span class="line"><span class="comment">#worker是服务信息,time是时间戳</span></span><br><span class="line"><span class="comment">#&#123;'dc': 0, 'worker': 1, 'timestamp': 1592131606294, 'last_timestamp': 550281600000, 'sequence': 0, 'sequence_overload': 0, 'errors': 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取ID"><a href="#获取ID" class="headerlink" title="获取ID"></a>获取ID</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">print(snowflake.client.get_guid())</span><br><span class="line"></span><br><span class="line"><span class="comment">#4369836784469676033</span></span><br></pre></td></tr></table></figure><h3 id="根据ID反解析服务"><a href="#根据ID反解析服务" class="headerlink" title="根据ID反解析服务"></a>根据ID反解析服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">sid = snowflake.client.get_guid()</span><br><span class="line">print(sid)</span><br><span class="line"><span class="comment">#ID：4369838396760133633</span></span><br><span class="line">bid = bin(sid)</span><br><span class="line">print(bid)</span><br><span class="line"><span class="comment">#第一位是标识符，此后是41位的时间戳，紧接着10位的节点标识码，最后12位的递增序列，</span></span><br><span class="line"><span class="comment"># 从后面数12位是：000000000001，再数5位是：00001 这5位就是某个节点的存储标识，我们就二进制的00001转换为十进制</span></span><br><span class="line"><span class="comment">#0b11110010100100110010001101111010010100110000000001000000000001</span></span><br><span class="line">cid = bin(sid)[<span class="number">47</span>:<span class="number">52</span>]</span><br><span class="line">print(<span class="string">'存储节点'</span>,cid)</span><br><span class="line"><span class="comment">#存储节点 00001</span></span><br><span class="line">print(<span class="string">'反解析服务'</span>,int(cid,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#反解析服务 1</span></span><br></pre></td></tr></table></figure><h3 id="使用bigint存储"><a href="#使用bigint存储" class="headerlink" title="使用bigint存储"></a>使用bigint存储</h3><p>在使用好处显而易见，不仅全局唯一，并且有序按时间递增，同时占用空间少，生成的id仅仅是19位的整形数字，正好契合mysql的bigint数据类型，简直完美。<br>但是使用bigint有个bug，就是19位数字传到前端会发生关于js数字精度丢失问题。<br><a href="https://okwzh.cn/2020/06/14/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">关于精度丢失问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;唯一ID可以标识数据的唯一性，在分布式系统中生成唯一ID的方案有很多，常见的方式大概有以下三种：&lt;/p&gt;
&lt;p&gt;依赖数据库，使用如MySQL自增列或Oracle序列等。&lt;br&gt;&lt;a href=&quot;https://okwzh.cn/2020/06/14/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;根据UUID生成&lt;/a&gt;&lt;br&gt;snowflake雪花算法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="算法" scheme="http://www.okwzh.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>&#39;关于js数字过长出现的精度丢失问题&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/14/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://www.okwzh.cn/2020/06/14/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-14T07:37:27.000Z</published>
    <updated>2020-06-14T09:31:50.787Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，由于计算机的二进制实现和位数限制有些数无法有限表示。就像一些无理数不能有限表示。<br>js的整数和浮点数都属于Number类型的，所有数字都是以64位浮点数形式存储。所以我们在前端打印的时候，<br>发现一个很奇怪的问题，就是当console.log(1.00)时，我们发现打印结果是1,后边的.00都被舍去。虽然数值是正确的，<br>但是和理想结果有些偏差。</p><a id="more"></a><h3 id="针对雪花算法出现的问题"><a href="#针对雪花算法出现的问题" class="headerlink" title="针对雪花算法出现的问题"></a>针对雪花算法出现的问题</h3><p>在做<a href="">雪花算法</a>的时候，说过使用model中的bigint是最好的存储方式，但是在做的时候发现一个问题，就是在前端展示出现展示效果问题，话不多说，上代码</p><span class='p red'>这是我保存数据库的结果</span><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%95%E7%A4%BA%E7%BB%93%E6%9E%9C.png" alt="数据库展示结果"></p><span class='p red'>这是我后端获取数据</span><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E5%90%8E%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="后端展示数据"></p><span class='p red'>这是我前端获取数据的结果</span><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AF%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.png" alt="前端获取数据"><br>但是在我前端获取数据结果的时候，发现了一件很怪异的事情，就是js自动将我的数据给修改了，也就是前16位都是对着的。经过测试<br>发现，我的后端数据没有问题，在传递给前端的时候出现了差错，经过咨询和百度，发现了是js精度丢失的问题。<br>最常用的解决办法就是使用字符串类型。于是我把数据库的bitint类型给改成了varchar。完美解决。</p><h3 id="JavaScript的16位长度数字不变，超过就发生精度丢失问题。"><a href="#JavaScript的16位长度数字不变，超过就发生精度丢失问题。" class="headerlink" title="JavaScript的16位长度数字不变，超过就发生精度丢失问题。"></a>JavaScript的16位长度数字不变，超过就发生精度丢失问题。</h3><p>针对数字丢失问题，我做了实验。</p><figure class="highlight js"><figcaption><span>16位数字没变</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">1111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大安全数 1111111111111111</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>17位发生变化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">11111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大安全数 11111111111111112</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>20位发生变化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">11111111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大安全数 11111111111111110000</span></span><br></pre></td></tr></table></figure><p>根据以上代码，我们可以清晰看到在16位整数可以发现数字没有变化，但是在第17位的时候就发生了变化，长度越长后边都以0显示。<br><br>    </p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><pre><code>对于整数，前端出现问题的几率可能比较低，毕竟很少有业务需要需要用到超大整数，只要运算结果不超过 Math.pow(2, 53) 就不会丢失精度。对于小数，前端出现问题的几率还是很多的，尤其在一些电商网站涉及到金额等数据。解决方式：把小数放到位整数（乘倍数），再缩小回原来倍数（除倍数）</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中，由于计算机的二进制实现和位数限制有些数无法有限表示。就像一些无理数不能有限表示。&lt;br&gt;js的整数和浮点数都属于Number类型的，所有数字都是以64位浮点数形式存储。所以我们在前端打印的时候，&lt;br&gt;发现一个很奇怪的问题，就是当console.log(1.00)时，我们发现打印结果是1,后边的.00都被舍去。虽然数值是正确的，&lt;br&gt;但是和理想结果有些偏差。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://www.okwzh.cn/tags/vue/"/>
    
      <category term="js" scheme="http://www.okwzh.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>&#39;uuid生成唯一id&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/14/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/"/>
    <id>http://www.okwzh.cn/2020/06/14/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/</id>
    <published>2020-06-14T07:36:27.000Z</published>
    <updated>2020-06-14T08:14:01.790Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在做订单号的时候，可以发现我们使用订单号有个硬性条件，就是它最好的唯一性的,且最好是自增长。<br>在我们python中，系统自带了一个唯一的模块，就是uuid。但是我们使用uuid来生成订单号虽然也能使用，但是却有一个致命的缺点，就是无序。</p><a id="more"></a><h3 id="关于UUID-univeral-unique-identifier"><a href="#关于UUID-univeral-unique-identifier" class="headerlink" title="关于UUID(univeral unique identifier)"></a>关于UUID(univeral unique identifier)</h3><p>uuid是128位的全局唯一标识符（univeral unique identifier），通常用32位的一个字符串的形式来表现。python中自带了uuid模块来进行uuid的生成和管理工作。在python中的uuid模块是基于MAC地址、时间戳、命名空间、随机数、伪随机数来生成的。</p><span class='p red'>uuid.uuid1()</span><p>基于MAC地址，时间戳，随机数来生成唯一的uuid，可以保证全球范围内的唯一性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">print(uuid.uuid1())</span><br><span class="line"></span><br><span class="line"><span class="comment">#b8200238-ae14-11ea-859b-68ecc5357e24</span></span><br></pre></td></tr></table></figure><span class='p red'>uuid.uuid2()</span><p>uuid.uuid2()算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。不过需要注意的是python中没有基于DCE的算法，所以python的uuid模块中没有uuid2这个方法。</p><span class='p red'>uuid.uuid3()</span><p>通过计算一个命名空间和名字的md5散列值来给出一个uuid，所以可以保证命名空间中的不同名字具有不同的uuid，但是相同的名字就是相同的uuid了。<br>namespace并不是一个自己手动指定的字符串或其他量，而是在uuid模块中本身给出的一些值。比如uuid.NAMESPACE_DNS，uuid.NAMESPACE_OID，uuid.NAMESPACE_OID这些值。这些值本身也是UUID对象，根据一定的规则计算得出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">'uuid_name'</span></span><br><span class="line">namespace = uuid.NAMESPACE_URL</span><br><span class="line">print(uuid.uuid3(namespace,name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5b4c833b-b8f0-36de-84d3-5ab20550d1c6</span></span><br></pre></td></tr></table></figure><span class='p red'>uuid.uuid4()</span><p>通过伪随机数得到uuid，是有一定概率重复的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">print(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="comment">#1c0f445e-a357-4568-a9bc-25e0b4c07330</span></span><br></pre></td></tr></table></figure><span class='p red'>uuid.uuid5()</span><p>和uuid3基本相同，只不过采用的散列算法是sha1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">'uuid_name'</span></span><br><span class="line">namespace = uuid.NAMESPACE_URL</span><br><span class="line">print(uuid.uuid5(namespace,name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#87fec518-b116-571f-87e3-e40ab834ff45</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在做订单号的时候，可以发现我们使用订单号有个硬性条件，就是它最好的唯一性的,且最好是自增长。&lt;br&gt;在我们python中，系统自带了一个唯一的模块，就是uuid。但是我们使用uuid来生成订单号虽然也能使用，但是却有一个致命的缺点，就是无序。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="id" scheme="http://www.okwzh.cn/tags/id/"/>
    
  </entry>
  
  <entry>
    <title>&#39;使用又拍云及拖拽上传&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/09/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/"/>
    <id>http://www.okwzh.cn/2020/06/09/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/</id>
    <published>2020-06-09T02:28:35.000Z</published>
    <updated>2020-06-09T13:25:04.271Z</updated>
    
    <content type="html"><![CDATA[<p>官方网址：<a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云官网</a></p><p>1.<span class='p red'>点击注册或登录</span></p><a id="more"></a><p>2.<span class='p red'>点击云存储</span><br><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%911.png" alt="又拍云1"></p><p>3.<span class='p red'>创建服务</span><br><img src="/img//%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%912.png" alt="又拍云2"></p><p>4.<span class='p red'>查看又拍云图片</span><br><img src="/img//%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%913.png" alt="又拍云3"><br>  4.1<span class='p red'>分配的网址/图片名</span><br>    <a href="http://md-upyun.test.upcdn.net/图片名" target="_blank" rel="noopener">http://md-upyun.test.upcdn.net/图片名</a></p><p>  4.2<span class='p red'>进入文件管理查看</span></p><p>5.<span class='p red'>添加操作员</span><br><img src="/img//%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%914.jpg" alt="添加操作员"></p><p>6.<span class='p red'>添加操作员</span><br><img src="/img//%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%915.jpg" alt="创建操作员"></p><span class='p red'>下载依赖</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install upyun</span><br></pre></td></tr></table></figure><h3 id="使用又拍云下载大文件"><a href="#使用又拍云下载大文件" class="headerlink" title="使用又拍云下载大文件"></a>使用又拍云下载大文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#文件流操作(节省内存)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./bg.png'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment">#上传文件</span></span><br><span class="line">    res = up.put(<span class="string">'/bg.png'</span>,f,checksum=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行写入文件"><a href="#使用又拍云进行写入文件" class="headerlink" title="使用又拍云进行写入文件"></a>使用又拍云进行写入文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line">value = <span class="string">'hello python,恩呢恩'</span></span><br><span class="line">up.put(<span class="string">'/yun.txt'</span>,value)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行目录操作，创建文件夹"><a href="#使用又拍云进行目录操作，创建文件夹" class="headerlink" title="使用又拍云进行目录操作，创建文件夹"></a>使用又拍云进行目录操作，创建文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#目录操作,创建文件夹</span></span><br><span class="line">up.mkdir(<span class="string">'/ypyun_test/'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云移动文件"><a href="#使用又拍云移动文件" class="headerlink" title="使用又拍云移动文件"></a>使用又拍云移动文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#移动文件</span></span><br><span class="line"><span class="comment">#src移动谁，dest移动到哪</span></span><br><span class="line">up.move(<span class="string">'bg.png'</span>,<span class="string">'/ypyun_test/bg.png'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云复制文件"><a href="#使用又拍云复制文件" class="headerlink" title="使用又拍云复制文件"></a>使用又拍云复制文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line">up.copy(<span class="string">'9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>,<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云断点续传"><a href="#使用又拍云断点续传" class="headerlink" title="使用又拍云断点续传"></a>使用又拍云断点续传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#断点续传(第二次传的时候是从第一次剩下的开始继续上传)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'D:\学习资料\视频\猫和老鼠.mp4'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># need_resume=True断点续传</span></span><br><span class="line">    res = up.put(<span class="string">'/ypyun_test/猫和老鼠.mp4'</span>,f,checksum=<span class="literal">True</span>,need_resume=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行下载"><a href="#使用又拍云进行下载" class="headerlink" title="使用又拍云进行下载"></a>使用又拍云进行下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line">res = up.get(<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行删除"><a href="#使用又拍云进行删除" class="headerlink" title="使用又拍云进行删除"></a>使用又拍云进行删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">up.delete(<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br></pre></td></tr></table></figure><h3 id="拖拽上传代码示例"><a href="#拖拽上传代码示例" class="headerlink" title="拖拽上传代码示例"></a>拖拽上传代码示例</h3><p>vue代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"upload_upyun"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">                    拖拽上传</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> upload = <span class="built_in">document</span>.querySelector(<span class="string">'.upload'</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'dragenter'</span>, <span class="keyword">this</span>.onDrag, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'dragover'</span>, <span class="keyword">this</span>.onDrag, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'drop'</span>, <span class="keyword">this</span>.onDrop, <span class="literal">false</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//自定义方法</span></span></span><br><span class="line">    methods:&#123;</span><br><span class="line">        onDrag (e) &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDrop (e) &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            e.preventDefault();</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.upload_upyun(e.dataTransfer.files);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//上传又拍云</span></span></span><br><span class="line"><span class="actionscript">        upload_upyun:<span class="function"><span class="keyword">function</span><span class="params">(files)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取文件对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let file = e.target.files[0];</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> file = files[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//声明参数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> param = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">            param.append(<span class="string">'file'</span>,file);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="actionscript">                headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> &#125;</span></span><br><span class="line">            &#125;  </span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://localhost:8000/ypy/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'POST'</span>,</span></span><br><span class="line">                data:param,</span><br><span class="line">                config:config</span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line">            &#125;)             </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.upload</span> &#123;</span></span><br><span class="line">    margin: 100px auto;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 150px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f00</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>django代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">urls：    path(<span class="string">'ypy/'</span>,UpyunLoad.as_view()),</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件上传类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpyunLoad</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment">#前端获取文件</span></span><br><span class="line">        img = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line">        <span class="comment">#创建文件名</span></span><br><span class="line">        file_name = str(uuid.uuid1())+<span class="string">'.jpg'</span></span><br><span class="line">        print(file_name)</span><br><span class="line">        up = upyun.UpYun(<span class="string">'你的空间服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line">        <span class="comment">#x-gmkerl-rotate旋转角度，目前只允许设置：auto，90，180，270</span></span><br><span class="line">        headers = &#123;<span class="string">'x-gmkerl-rotate'</span>: <span class="string">'auto'</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> img.chunks():</span><br><span class="line">            res = up.put(<span class="string">'/%s'</span>%file_name, chunk, checksum=<span class="literal">True</span>, headers=headers)</span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'filename'</span>: file_name&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方网址：&lt;a href=&quot;https://www.upyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;又拍云官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;span class=&#39;p red&#39;&gt;点击注册或登录&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="又拍云" scheme="http://www.okwzh.cn/categories/%E5%8F%88%E6%8B%8D%E4%BA%91/"/>
    
    
      <category term="又拍云" scheme="http://www.okwzh.cn/tags/%E5%8F%88%E6%8B%8D%E4%BA%91/"/>
    
      <category term="异步" scheme="http://www.okwzh.cn/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>&#39;结合又拍云实现多线程异步分块上传&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/09/%E7%BB%93%E5%90%88%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/"/>
    <id>http://www.okwzh.cn/2020/06/09/%E7%BB%93%E5%90%88%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-06-09T02:28:35.000Z</published>
    <updated>2020-06-09T14:07:40.250Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们已经说过又拍云的<a href="https://okwzh.cn/2020/06/09/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">常用操作</a>,今天我们讲一下结合多线程实现异步上传</p><span class='p red'>当我们使用第三方依赖，要注意模块是不是最新依赖，进行更新</span><p>UPYUN Python SDK文档：<a href="https://github.com/upyun/python-sdk#upyun-python-sdk" target="_blank" rel="noopener">点击跳转</a><br>查看最新python SDK：<a href="ontawesome.com.cn/faicons/">点击跳转</a></p><a id="more"></a><h3 id="多线程异步实现又拍云上传"><a href="#多线程异步实现又拍云上传" class="headerlink" title="多线程异步实现又拍云上传"></a>多线程异步实现又拍云上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun  <span class="comment"># 又拍云</span></span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 文件模块</span></span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建又拍云实例</span></span><br><span class="line"><span class="comment"># 三个参数,又拍云服务名称，操作员名称，操作员密码</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, <span class="string">'操作员名称'</span>, <span class="string">'操作员密码'</span>)</span><br><span class="line"><span class="comment"># 分块上传</span></span><br><span class="line">uploader = up.init_multi_uploader(<span class="string">'/upyun_python/upyun_sanguo.mp4'</span>)</span><br><span class="line"><span class="comment">#同步上传</span></span><br><span class="line"><span class="comment"># uploader.upload(0,os.urandom(1024*1024))</span></span><br><span class="line"><span class="comment"># uploader.upload(1,os.urandom(1024*1024))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用多线程调用上传</span></span><br><span class="line"><span class="comment">#创建线程池</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="comment">#uploader.upload不加括号，这里是声明，不是调用，调用的话还是同步</span></span><br><span class="line"><span class="comment">#参数写在args里,(0声明异步上传序号)</span></span><br><span class="line">t1 = threading.Thread(target=uploader.upload,args=(<span class="number">0</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line"><span class="comment"># #添加到线程池</span></span><br><span class="line">threads.append(t1)</span><br><span class="line">t2 = threading.Thread(target=uploader.upload,args=(<span class="number">1</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动多线程</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"><span class="comment">#     #阻塞主线程</span></span><br><span class="line">    t.join()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # #声明调用结束</span></span><br><span class="line">res = uploader.complete()</span><br></pre></td></tr></table></figure><h3 id="多线程异步对文件进行分块上传"><a href="#多线程异步对文件进行分块上传" class="headerlink" title="多线程异步对文件进行分块上传"></a>多线程异步对文件进行分块上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传又拍云文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upyun_Post</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取视频文件</span></span><br><span class="line">        file = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line">        print(file)</span><br><span class="line">        up = upyun.UpYun(<span class="string">'服务名称'</span>, <span class="string">'操作员名称'</span>, <span class="string">'操作员密码'</span>)</span><br><span class="line">        uploader = up.init_multi_uploader(<span class="string">"/upyun-python-sdk/%s"</span> % file, part_size=(<span class="number">1024</span> * <span class="number">2048</span>))</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(file.chunks(chunk_size=(<span class="number">1024</span> * <span class="number">2048</span>))):</span><br><span class="line">            t = threading.Thread(target=uploader.upload, args=(index, value))</span><br><span class="line">            threads.append(t)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">            i.start()</span><br><span class="line">            i.join()</span><br><span class="line">        res = uploader.complete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'上传成功'</span>&#125;)</span><br><span class="line">        <span class="comment"># return HttpResponse(json.dumps(&#123;'filename': file&#125;), content_type='application/json')</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们已经说过又拍云的&lt;a href=&quot;https://okwzh.cn/2020/06/09/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;常用操作&lt;/a&gt;,今天我们讲一下结合多线程实现异步上传&lt;/p&gt;
&lt;span class=&#39;p red&#39;&gt;当我们使用第三方依赖，要注意模块是不是最新依赖，进行更新&lt;/span&gt;

&lt;p&gt;UPYUN Python SDK文档：&lt;a href=&quot;https://github.com/upyun/python-sdk#upyun-python-sdk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击跳转&lt;/a&gt;&lt;br&gt;查看最新python SDK：&lt;a href=&quot;ontawesome.com.cn/faicons/&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="又拍云" scheme="http://www.okwzh.cn/categories/%E5%8F%88%E6%8B%8D%E4%BA%91/"/>
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="又拍云" scheme="http://www.okwzh.cn/tags/%E5%8F%88%E6%8B%8D%E4%BA%91/"/>
    
      <category term="异步" scheme="http://www.okwzh.cn/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="多线程" scheme="http://www.okwzh.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>&#39;响应状态码和请求方法&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/08/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://www.okwzh.cn/2020/06/08/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/</id>
    <published>2020-06-08T10:28:33.000Z</published>
    <updated>2020-06-08T10:43:16.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="状态码分类-HTTP-Status-Code"><a href="#状态码分类-HTTP-Status-Code" class="headerlink" title="状态码分类(HTTP Status Code)"></a>状态码分类(HTTP Status Code)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1XX- 信息型，服务器收到请求，需要请求者继续操作。</span><br><span class="line">2XX- 成功型，请求成功收到，理解并处理。</span><br><span class="line">3XX - 重定向，需要进一步的操作以完成请求。</span><br><span class="line">4XX - 客户端错误，请求包含语法错误或无法完成请求。</span><br><span class="line">5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="常用状态码"><a href="#常用状态码" class="headerlink" title="常用状态码"></a>常用状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">100系列：</span><br><span class="line">    100   继续   客户端应当继续发送请求</span><br><span class="line"></span><br><span class="line">200系列：</span><br><span class="line">200   成功   服务器成功处理了请求</span><br><span class="line">300系列：</span><br><span class="line">301   永久移动   请求的网页已永久移动到新位置，永久重定向</span><br><span class="line">302   临时移动   请求的网页暂时跳转到其他页面，临时重定向</span><br><span class="line">400系列：</span><br><span class="line">400   错误请求   服务器无法解析该请求</span><br><span class="line">401   未授权     请求没有进行身份验证或验证未通过</span><br><span class="line">403   禁止访问   服务器拒绝此请求</span><br><span class="line">404   未找到     服务器找不到请求的网页</span><br><span class="line">500系列：</span><br><span class="line">500  服务器内部错误   服务器遇到错误，无法完成请求</span><br><span class="line">501   未实现          服务器不具备完成请求的功能</span><br><span class="line">502   错误网关        服务器做为网关或代理，从上游服务器收到无效响应</span><br><span class="line">504   网关超时        服务器做为网关或代理，但是没有及时从上游服务器收到请求</span><br><span class="line"> 505   HTTP版本不支持  服务器不支持请求中所用的HTTP协议版本</span><br></pre></td></tr></table></figure><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1).GET：请求页面，并返回页面内容  </span><br><span class="line">2).POST：用于提交表单数据或上传文件，数据包含在请求体中</span><br><span class="line">3).PUT：从客户端向服务器传送的数据取代指定文档中的内容</span><br><span class="line">4).DELETE：请求服务器删除指定的页面</span><br><span class="line">5).CONNECT：把服务器当做跳板，让服务器代替客户端访问其他网页</span><br><span class="line">6).HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">7).OPTIONS：允许客户端查看服务器的性能</span><br><span class="line">8).TRACE：回显服务器收到的请求，主要用于测试或诊断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重点掌握GET&amp;POST区别：</span><br><span class="line">1.GET请求中的参数包含在URL里面，数据可以在URL中看到。</span><br><span class="line">而POST请求的URL不会包含这些数据，POST的数据都是通过表单形式传输的，会包含在请求体中。</span><br><span class="line">    2.GET请求提交的数据最多之后1024字节，而POST方式没有限制</span><br><span class="line">    3.POST请求比GET请求相对安全。</span><br></pre></td></tr></table></figure><h3 id="请求响应步骤"><a href="#请求响应步骤" class="headerlink" title="请求响应步骤"></a>请求响应步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端连接到Web服务器-&gt;发送Http请求-&gt;服务器接受请求并返回HTTP响应-&gt;释放连接TCP连接-&gt;客户端浏览器解析HTML内容</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;状态码分类-HTTP-Status-Code&quot;&gt;&lt;a href=&quot;#状态码分类-HTTP-Status-Code&quot; class=&quot;headerlink&quot; title=&quot;状态码分类(HTTP Status Code)&quot;&gt;&lt;/a&gt;状态码分类(HTTP Status Code)&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1XX- 信息型，服务器收到请求，需要请求者继续操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2XX- 成功型，请求成功收到，理解并处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3XX - 重定向，需要进一步的操作以完成请求。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4XX - 客户端错误，请求包含语法错误或无法完成请求。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5XX - 服务器错误，服务器在处理请求的过程中发生了错误。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="协议" scheme="http://www.okwzh.cn/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="协议" scheme="http://www.okwzh.cn/tags/%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="状态码" scheme="http://www.okwzh.cn/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
      <category term="请求方法" scheme="http://www.okwzh.cn/tags/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>&#39;HTTP协议和HTTPS协议&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/08/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE/"/>
    <id>http://www.okwzh.cn/2020/06/08/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-06-08T09:21:21.000Z</published>
    <updated>2020-06-08T10:29:45.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP协议和HTTPS协议的概念"><a href="#HTTP协议和HTTPS协议的概念" class="headerlink" title="HTTP协议和HTTPS协议的概念"></a>HTTP协议和HTTPS协议的概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP协议(Hyper Text Transfer Protocol)：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），</span><br><span class="line">    用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</span><br><span class="line">HTTPS协议：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，</span><br><span class="line">    HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</span><br><span class="line">HTTPS协议的主要作用可以分为两种：</span><br><span class="line">    1.一种是建立一个信息安全通道，来保证数据传输的安全；</span><br><span class="line">    2.另一种就是确认网站的真实性。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="HTTP协议的缺点"><a href="#HTTP协议的缺点" class="headerlink" title="HTTP协议的缺点"></a>HTTP协议的缺点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP缺点：</span><br><span class="line">    1.通信使用明文，内容可能被窃听(重要密码泄露)</span><br><span class="line">    2.不验证通信方身份，有可能遭遇伪装(跨站点请求伪造)</span><br><span class="line">    3.无法证明报文的完整性，有可能已遭篡改(运营商劫持)</span><br></pre></td></tr></table></figure><h3 id="http和https的区别与联系及特点"><a href="#http和https的区别与联系及特点" class="headerlink" title="http和https的区别与联系及特点"></a>http和https的区别与联系及特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    HTTP协议是超文本传输协议，被用于在Web浏览器和网站服务器之间传递信息的，</span><br><span class="line">是一个基于请求与响应，无状态的，应用层的协议，是TCP&#x2F;IP协议传输数据，HTTP协议以明文方式发送内容，</span><br><span class="line">不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，</span><br><span class="line">就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</span><br><span class="line"></span><br><span class="line">    为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，</span><br><span class="line">为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，</span><br><span class="line">SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</span><br><span class="line"></span><br><span class="line">无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作</span><br><span class="line">无连接：每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。</span><br><span class="line">SSL：网景公司设计了SSL（SecureSocketsLayer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。</span><br></pre></td></tr></table></figure><h3 id="HTTPS和HTTP的区别主要如下："><a href="#HTTPS和HTTP的区别主要如下：" class="headerlink" title="HTTPS和HTTP的区别主要如下："></a>HTTPS和HTTP的区别主要如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</span><br><span class="line">2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl（安全套接字层SSL）加密传输协议。</span><br><span class="line">3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</span><br><span class="line">4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</span><br><span class="line">5、https相对于http协议的连接方式来讲，性能方面会有所损耗。</span><br></pre></td></tr></table></figure><h3 id="HTTPS的工作流程"><a href="#HTTPS的工作流程" class="headerlink" title="HTTPS的工作流程"></a>HTTPS的工作流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一步：客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</span><br><span class="line">第二步：Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</span><br><span class="line">第三步：客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</span><br><span class="line">第四步：客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</span><br><span class="line">第五步：Web服务器利用自己的私钥解密出会话密钥。</span><br><span class="line">第六步：Web服务器利用会话密钥加密与客户端之间的通信。</span><br></pre></td></tr></table></figure><h3 id="HTTPS的优缺点"><a href="#HTTPS的优缺点" class="headerlink" title="HTTPS的优缺点"></a>HTTPS的优缺点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">    <span class="number">1.</span>SEO方面：谷歌曾在<span class="number">2014</span>年<span class="number">8</span>月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</span><br><span class="line">    <span class="number">2.</span>安全性：</span><br><span class="line">        （<span class="number">1</span>）、使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</span><br><span class="line">        （<span class="number">2</span>）、HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，</span><br><span class="line">        要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</span><br><span class="line">        （<span class="number">3</span>）、HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">    <span class="number">1.</span>SEO方面：</span><br><span class="line">        （<span class="number">1</span>）使用HTTPS协议会使页面的加载时间延长近<span class="number">50</span>%，增加<span class="number">10</span>%到<span class="number">20</span>%的耗电</span><br><span class="line">        （<span class="number">2</span>）HTTPS协议还会影响缓存，增加数据开销和功耗，甚至已有安全措施也会受到影响也会因此而受到影响。</span><br><span class="line">        （<span class="number">3</span>）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。</span><br><span class="line">        （<span class="number">4</span>）成本增加。</span><br><span class="line">    <span class="number">2.</span>经济方面：</span><br><span class="line">        (<span class="number">1</span>)SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</span><br><span class="line">        (<span class="number">2</span>)HTTPS连接缓存不如HTTP高效，大流量网站如非必要也不会采</span><br><span class="line">        (<span class="number">3</span>)HTTPS协议握手阶段比较费时，对网站的相应速度有负面影响</span><br></pre></td></tr></table></figure><h3 id="免费HTTPS证书推荐-排名不分先后"><a href="#免费HTTPS证书推荐-排名不分先后" class="headerlink" title="免费HTTPS证书推荐(排名不分先后)"></a>免费HTTPS证书推荐(排名不分先后)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SSL 证书级别分为三种类型，域名型SSL证书（DV SSL）、企业型SSL证书（OVSSL）、增强型SSL证书（EVSSL）</span><br><span class="line">(<span class="number">1</span>).Let<span class="string">'s Encrypt </span></span><br><span class="line"><span class="string">(2).startSSL</span></span><br><span class="line"><span class="string">(3).Wosign沃通SSL</span></span><br><span class="line"><span class="string">(4).NameCheap   </span></span><br><span class="line"><span class="string">(5).腾讯云DV SSL 证书</span></span><br><span class="line"><span class="string">(6).阿里云DV SSL证书</span></span><br><span class="line"><span class="string">(7).360网站卫士、百度云加速免费SSL、又拍云、七牛云</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP协议和HTTPS协议的概念&quot;&gt;&lt;a href=&quot;#HTTP协议和HTTPS协议的概念&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议和HTTPS协议的概念&quot;&gt;&lt;/a&gt;HTTP协议和HTTPS协议的概念&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP协议(Hyper Text Transfer Protocol)：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTPS协议：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTPS协议的主要作用可以分为两种：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1.一种是建立一个信息安全通道，来保证数据传输的安全；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2.另一种就是确认网站的真实性。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="协议" scheme="http://www.okwzh.cn/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="协议" scheme="http://www.okwzh.cn/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>&#39;结合百度ai实现自然语言分析&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/07/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6AI%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/"/>
    <id>http://www.okwzh.cn/2020/06/07/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6AI%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/</id>
    <published>2020-06-07T13:25:36.000Z</published>
    <updated>2020-06-07T13:49:49.045Z</updated>
    
    <content type="html"><![CDATA[<p>百度AI开放平台地址：<a href="https://ai.baidu.com/" target="_blank" rel="noopener">点击跳转</a><br>官方文档地址：<a href="https://ai.baidu.com/tech/nlp_apply/sentiment_classify" target="_blank" rel="noopener">点击跳转</a></p><a id="more"></a><h3 id="获取应用"><a href="#获取应用" class="headerlink" title="获取应用"></a>获取应用</h3><p>1.进行注册登陆<br>2.找到文字识别–&gt;应用列表<br>3.创建应用<br>4.获取AppID,API Key,Secret Key<br><img src="/img/python/%E7%99%BE%E5%BA%A6AI%E5%BA%94%E7%94%A8.png" alt="获取应用"></p><p>安装百度AI模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><h3 id="对文本进行错误检查"><a href="#对文本进行错误检查" class="headerlink" title="对文本进行错误检查"></a>对文本进行错误检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#定义检查文本</span></span><br><span class="line">text = <span class="string">'学习python，学习人工只能'</span></span><br><span class="line"><span class="comment">#进行检查</span></span><br><span class="line">res = client.ecnet(text)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 9052624029983259239, 'item': &#123;'vec_fragment': [&#123;'ori_frag': '人工只能', 'begin_pos': 16, 'correct_frag': '人工智能', 'end_pos': 24&#125;], 'score': 0.590899, 'correct_query': '学习python，学习人工智能'&#125;, 'text': '学习python，学习人工只能'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对文本进行标签处理"><a href="#对文本进行标签处理" class="headerlink" title="对文本进行标签处理"></a>对文本进行标签处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line">title = <span class="string">'python人工智能在线学习'</span></span><br><span class="line">content = <span class="string">'我再北京学习人工智能，他是基于python的一门学科'</span></span><br><span class="line"><span class="comment">#调取标签</span></span><br><span class="line">res = client.keyword(title,content)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 2174377746871861863, 'items': [&#123;'score': 0.9486, 'tag': '人工智能'&#125;, &#123;'score': 0.768706, 'tag': 'python'&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对文本进行情感分析"><a href="#对文本进行情感分析" class="headerlink" title="对文本进行情感分析"></a>对文本进行情感分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#情感分析</span></span><br><span class="line">text = <span class="string">'华为是一家很棒的公司'</span></span><br><span class="line">print(client.commentTag(text))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 1058331879559622439, 'items': [&#123;'sentiment': 2, 'abstract': '华为是一家很棒的公司&lt;span&gt;&lt;/span&gt;', 'prop': '感觉', 'begin_pos': 20, 'end_pos': 20, 'adj': '棒'&#125;]&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度AI开放平台地址：&lt;a href=&quot;https://ai.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击跳转&lt;/a&gt;&lt;br&gt;官方文档地址：&lt;a href=&quot;https://ai.baidu.com/tech/nlp_apply/sentiment_classify&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://www.okwzh.cn/categories/django/"/>
    
    
      <category term="django" scheme="http://www.okwzh.cn/tags/django/"/>
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>&#39;第三方登录-gitee登录&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/06/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-gitee%E7%99%BB%E5%BD%95/"/>
    <id>http://www.okwzh.cn/2020/06/06/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-gitee%E7%99%BB%E5%BD%95/</id>
    <published>2020-06-06T08:00:02.000Z</published>
    <updated>2020-06-06T08:36:09.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建gitee应用"><a href="#创建gitee应用" class="headerlink" title="创建gitee应用"></a>创建gitee应用</h3><p>1.登陆gitee <a id="more"></a><a href="https://gitee.com/" target="_blank" rel="noopener">gitee登录网站</a><br>2.点击头像,设置,第三方应用<br>3.创建应用<br><img src="/img/gitee/gitee%E7%99%BB%E5%BD%95.png" alt="gitee注册应用"><br>4.自定义应用名称，应用描述，应用回调网址等。<br>5.创建完成，获取Client ID,Client Secret,还有应用回调地址。</p><h3 id="gitee开发文档"><a href="#gitee开发文档" class="headerlink" title="gitee开发文档"></a>gitee开发文档</h3><p>开发文档地址：<a href="https://gitee.com/api/v5/oauth_doc#/list-item-2" target="_blank" rel="noopener">点击跳转</a></p><!-- more --><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"'http://localhost:8000/static/mayun.png'"</span> <span class="attr">alt</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"gitee_login"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//第三方登录--&gt;gitee登录</span></span></span><br><span class="line">        gitee_login()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> client_id = <span class="string">'8778f21baf13e5a37d2d5d74b66dc74b2716d4f44d18bed2f08f02c229142812'</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> back = <span class="string">'http://localhost:8000/gitee_back'</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">'https://gitee.com/oauth/authorize?client_id='</span>+client_id+<span class="string">'&amp;redirect_uri='</span>+back+<span class="string">'&amp;response_type=code'</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = url</span></span><br><span class="line">        &#125;,</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.获取code来换取access_token</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitee三方登录</span></span><br><span class="line">url:    path(<span class="string">'gitee_back'</span>,Gitee_Back.as_view()),    <span class="comment">#gitee回调</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gitee_Back</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        code = request.GET.get(<span class="string">'code'</span>)</span><br><span class="line">        print(code)</span><br><span class="line">        redirect_uri = <span class="string">'http://localhost:8000/gitee_back'</span></span><br><span class="line">        <span class="comment"># url = 'https://gitee.com/oauth/authorize?client_id='+ CLIENT_ID +'&amp;redirect_uri=' + redirect_uri +'&amp;response_type=code'</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'client_id'</span>:CLIENT_ID,</span><br><span class="line">            <span class="string">'client_secret'</span>:CLIENT_SECRET,</span><br><span class="line">            <span class="string">'redirect_uri'</span>:redirect_uri,</span><br><span class="line">            <span class="string">'code'</span>:code,</span><br><span class="line">            <span class="string">'grant_type'</span>: <span class="string">'authorization_code'</span></span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">'https://gitee.com/oauth/token?grant_type=authorization_code&amp;code='</span>+code+<span class="string">'&amp;client_id='</span>+ CLIENT_ID +<span class="string">'&amp;redirect_uri='</span>+ redirect_uri +<span class="string">'&amp;client_secret='</span>+CLIENT_SECRET</span><br><span class="line">        res = requests.post(url=url,data=data)</span><br><span class="line">        print(res.json())</span><br></pre></td></tr></table></figure><p>7.点击开发文档，API文档，用户账户，获取授权用户资料，申请授权<br><img src="/img/gitee/gitee%E7%99%BB%E5%BD%952.png" alt="根据code换取access_token"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接上</span></span><br><span class="line">access_token = res.json()[<span class="string">'access_token'</span>]<span class="comment">#获取token</span></span><br><span class="line">token_uri = <span class="string">'https://gitee.com/api/v5/user?access_token='</span> +access_token</span><br><span class="line">res = requests.get(url=token_uri)</span><br><span class="line">print(res.json())</span><br><span class="line">user_id = <span class="string">''</span></span><br><span class="line">username = str(res.json()[<span class="string">'name'</span>])</span><br><span class="line">user = User.objects.filter(username=username).first()</span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    <span class="comment">#表示曾经登陆过</span></span><br><span class="line">    user_id= int(res.json()[<span class="string">'id'</span>])</span><br><span class="line">    user.username = username</span><br><span class="line">    print(<span class="string">'已经登录过,id是%s,名字是%s'</span>%(user.id,user.username))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    user = User(username=username,id=int(res.json()[<span class="string">'id'</span>]),password=make_password(<span class="string">""</span>))</span><br><span class="line">    user.save()</span><br><span class="line">    user_id = user.id</span><br><span class="line">    print(<span class="string">'第一次注册，id是%s,名字是%s'</span>%(user.id,user.username))</span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/?user_id='</span>+str(user_id)+<span class="string">'&amp;username='</span>+username)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建gitee应用&quot;&gt;&lt;a href=&quot;#创建gitee应用&quot; class=&quot;headerlink&quot; title=&quot;创建gitee应用&quot;&gt;&lt;/a&gt;创建gitee应用&lt;/h3&gt;&lt;p&gt;1.登陆gitee
    
    </summary>
    
    
      <category term="django" scheme="http://www.okwzh.cn/categories/django/"/>
    
    
      <category term="django" scheme="http://www.okwzh.cn/tags/django/"/>
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>&#39;VOLANTIS博客的搭建&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/05/VOLANTIS%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.okwzh.cn/2020/06/05/VOLANTIS%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-06-05T07:30:08.000Z</published>
    <updated>2020-06-05T13:46:19.416Z</updated>
    
    <content type="html"><![CDATA[<span class='p red'>站点配置_config.yml是你的博客设置</span><br><span class='p red'>主题配置_config.yml是你的博客主题设置</span><a id="more"></a><h3 id="配置博客主题为VOLANTIS"><a href="#配置博客主题为VOLANTIS" class="headerlink" title="配置博客主题为VOLANTIS"></a>配置博客主题为VOLANTIS</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在站点配置_config.yml中修改</span></span><br><span class="line"><span class="string">blog/_config.yml</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">volantis</span></span><br></pre></td></tr></table></figure><h3 id="配置博客主题标题"><a href="#配置博客主题标题" class="headerlink" title="配置博客主题标题"></a>配置博客主题标题</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在站点配置_config.yml中修改</span></span><br><span class="line"><span class="string">blog/_config.yml</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你博客主题名称</span></span><br></pre></td></tr></table></figure><h3 id="front-matter"><a href="#front-matter" class="headerlink" title="front-matter"></a>front-matter</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span><span class="string">/false</span> <span class="comment">#设置封面</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#参考资料</span></span><br><span class="line"><span class="attr">references:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Apple</span> <span class="string">Developer</span> <span class="string">Documentation</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://developer.apple.com/documentation/</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;span class=&#39;p red&#39;&gt;站点配置_config.yml是你的博客设置&lt;/span&gt;
&lt;br&gt;
&lt;span class=&#39;p red&#39;&gt;主题配置_config.yml是你的博客主题设置&lt;/span&gt;
    
    </summary>
    
    
    
      <category term="hexo博客" scheme="http://www.okwzh.cn/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>&#39;jieba库的安装使用&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/04/jieba%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.okwzh.cn/2020/06/04/jieba%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-04T03:00:26.000Z</published>
    <updated>2020-06-04T03:07:58.657Z</updated>
    
    <content type="html"><![CDATA[<p>jieba库的安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/img/python/jieba%E5%BA%93%E7%9A%84%E4%B8%8B%E8%BD%BD.png" alt="jieba库的安装"></p><h3 id="jieba库的使用"><a href="#jieba库的使用" class="headerlink" title="jieba库的使用"></a>jieba库的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">data = <span class="string">"Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。"</span> \</span><br><span class="line">       <span class="string">"Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取标签</span></span><br><span class="line"><span class="keyword">for</span> keyword,weight <span class="keyword">in</span> jieba.analyse.extract_tags(data,withWeight=<span class="literal">True</span>):</span><br><span class="line">    print(<span class="string">'%s:%s'</span> % (keyword,weight))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出内容</span></span><br><span class="line"><span class="comment"># Building prefix dict from the default dictionary ...</span></span><br><span class="line"><span class="comment"># Loading model from cache C:\Users\10186\AppData\Local\Temp\jieba.cache</span></span><br><span class="line"><span class="comment"># Loading model cost 0.878 seconds.</span></span><br><span class="line"><span class="comment"># Prefix dict has been built successfully.</span></span><br><span class="line"><span class="comment"># Python:1.1385492859904762</span></span><br><span class="line"><span class="comment"># 数据类型:0.585297130452381</span></span><br><span class="line"><span class="comment"># Guido:0.5692746429952381</span></span><br><span class="line"><span class="comment"># van:0.5692746429952381</span></span><br><span class="line"><span class="comment"># Rossum:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 1989:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 1991:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 发行版:0.5270221099</span></span><br><span class="line"><span class="comment"># 面向对象:0.5067895768571429</span></span><br><span class="line"><span class="comment"># 程序设计:0.44264321266619044</span></span><br><span class="line"><span class="comment"># 发明:0.31970364912190474</span></span><br><span class="line"><span class="comment"># 动态:0.3195238865542857</span></span><br><span class="line"><span class="comment"># 高级:0.3114256070914286</span></span><br><span class="line"><span class="comment"># 语言:0.29349988448285713</span></span><br><span class="line"><span class="comment"># 第一个:0.28425680430714284</span></span><br><span class="line"><span class="comment"># 解释:0.2720391527752381</span></span><br><span class="line"><span class="comment"># 年底:0.2701318006847619</span></span><br><span class="line"><span class="comment"># 公开:0.26735277138999997</span></span><br><span class="line"><span class="comment"># 发行:0.22793990734714284</span></span><br><span class="line"><span class="comment"># 一种:0.19674458076142856</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jieba库的安装&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install jieba&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>&#39;无限极分类&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/03/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB/"/>
    <id>http://www.okwzh.cn/2020/06/03/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB/</id>
    <published>2020-06-03T12:19:22.000Z</published>
    <updated>2020-06-03T12:51:18.600Z</updated>
    
    <content type="html"><![CDATA[<p>什么是无限极分类呢？</p><p>无限极分类简单点说就是一个类可以分成多个子类，然后一个子类又可以分另外多个子类这样无限分下去，<br>就好象windows可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样.</p><a id="more"></a><p>无限极分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">衣服</span><br><span class="line">    上衣</span><br><span class="line">        短袖</span><br><span class="line">        卫衣</span><br><span class="line">    裤子</span><br><span class="line">        牛仔裤</span><br><span class="line">        休闲裤</span><br><span class="line">    鞋子</span><br><span class="line">        运动鞋</span><br><span class="line">        休闲鞋</span><br></pre></td></tr></table></figure><p>无限极分类应用场景很广泛，例：<br>    帖子的回复功能<br>    课程的目录章节</p><h3 id="基于python-结合django-vue实现无限极分类-递归层级结构"><a href="#基于python-结合django-vue实现无限极分类-递归层级结构" class="headerlink" title="基于python,结合django+vue实现无限极分类(递归层级结构)"></a>基于python,结合django+vue实现无限极分类(递归层级结构)</h3><span class='p green'>在myapp中model.py文件下</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cate</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#id是主键，自增</span></span><br><span class="line"><span class="comment">#分类名称</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#父级分类id</span></span><br><span class="line">pid = models.IntegerField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">db_table = <span class="string">'cate'</span></span><br></pre></td></tr></table></figure><span class='p green'>数据库配置数据</span><p><img src="/img/%E7%AE%97%E6%B3%95/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB.png" alt="无限极分类数据库配置"></p><span class='p green'>使用drf框架进行序列化</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Cate</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CateSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Cate</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure><span class='p green'>写一个用来进行递归的方法，进行层级结构划分</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Xtree</span><span class="params">(datas)</span>:</span></span><br><span class="line">    lists = []</span><br><span class="line">    tree = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> datas:</span><br><span class="line">        tree[item[<span class="string">'id'</span>]] = item</span><br><span class="line">        print(tree[item[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i[<span class="string">'pid'</span>]:</span><br><span class="line">            root = tree[i[<span class="string">'id'</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = i[<span class="string">'pid'</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'child'</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">'child'</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">'child'</span>].append(tree[i[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><span class='p green'>写视图接口并分配路由</span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .myser <span class="keyword">import</span> CateSer</span><br><span class="line"><span class="keyword">from</span> .cengji <span class="keyword">import</span> Xtree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归层级分类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTree</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        cates = Cate.objects.all()</span><br><span class="line">        ser = CateSer(cates,many=<span class="literal">True</span>)</span><br><span class="line">        trees = Xtree(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(trees)</span><br><span class="line"><span class="comment">#分配url</span></span><br><span class="line"><span class="comment"># path('tree/',MyTree.as_view()),</span></span><br></pre></td></tr></table></figure><span class='p green'>测试接口</span><p><img src="/img/%E7%AE%97%E6%B3%95/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB%E5%90%8E%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="后端接口返回数据"></p><h3 id="前端使用递归组件渲染"><a href="#前端使用递归组件渲染" class="headerlink" title="前端使用递归组件渲染"></a>前端使用递归组件渲染</h3><p>所谓递归组件: 就是组件可以在它们自己的模板中调用自身，<br>不过它们只能通过 name 选项来做这件事，例如给组件设置属性 name: ‘Reply’，<br>然后在模板中就可以使用 Reply 调用自己进行递归调用了</p><span class='p green'>设置Reply.vue</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[data.id==0 ? 'root':'','reply']"</span>&gt;</span></span><br><span class="line">                &#123;&#123;data.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"data.child &amp;&amp; data.child.length&gt;0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Reply</span> <span class="attr">v-for</span>=<span class="string">"c in data.child"</span> <span class="attr">:key</span>=<span class="string">"c.id"</span> <span class="attr">:data</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">Reply</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name:<span class="string">"Reply"</span>,<span class="comment">//递归需要设置name属性，才能在模板中调用自身</span></span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    props:[<span class="string">'data'</span>],</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.reply</span>&#123;</span></span><br><span class="line">    padding-left: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">    padding-left: 20px;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.root</span>&#123;</span></span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p green'>在其他组件调用Reply.vue</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">import cengji from '@/components/cengji'</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    path:'/cengji',</span></span><br><span class="line"><span class="comment">    name:'cengji',</span></span><br><span class="line"><span class="comment">    component:cengji</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Reply</span> <span class="attr">:data</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">Reply</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// import &#123;config,formatXml&#125; from '../config'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// import mh_test from './mh_test.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Reply <span class="keyword">from</span> <span class="string">'./Reply'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// import md5 from 'js-md5'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            online:0,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Reply</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.get_token()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        get_token()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">"http://localhost:8000/tree/"</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">"GET"</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> tree = &#123;<span class="string">'id'</span>:<span class="number">0</span>,name:<span class="string">"123"</span>&#125;</span></span><br><span class="line"><span class="actionscript">                tree[<span class="string">'child'</span>] = resp.data</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.data = tree</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.data)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.on</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#cdcbff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.off</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#fefdff</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p green'>前端结果展示</span><p><img src="/img/%E7%AE%97%E6%B3%95/%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="无限极分类前端结果展示"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是无限极分类呢？&lt;/p&gt;
&lt;p&gt;无限极分类简单点说就是一个类可以分成多个子类，然后一个子类又可以分另外多个子类这样无限分下去，&lt;br&gt;就好象windows可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>&#39;算法-斐波那契数列&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/03/%E7%AE%97%E6%B3%95-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://www.okwzh.cn/2020/06/03/%E7%AE%97%E6%B3%95-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2020-06-03T07:39:35.000Z</published>
    <updated>2020-06-03T07:58:49.369Z</updated>
    
    <content type="html"><![CDATA[<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</p><a id="more"></a><h3 id="递归斐波那契数列"><a href="#递归斐波那契数列" class="headerlink" title="递归斐波那契数列"></a>递归斐波那契数列</h3><p>(写法最简洁，但是效率最低，会出现大量的重复计算，时间复杂度O（1.618^n）,而且最深度1000)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 定义出口</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> func(n<span class="number">-1</span>)+func(n<span class="number">-2</span>)  <span class="comment">#第一位数和第二位数相加的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(fib_func(i),end=<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure><h3 id="生成器斐波那契数列"><a href="#生成器斐波那契数列" class="headerlink" title="生成器斐波那契数列"></a>生成器斐波那契数列</h3><p>带有yield的函数都被看成生成器，生成器是可迭代对象，且具备<strong>iter</strong> 和 <strong>next</strong>方法， 可以遍历获取元素<br>python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<strong>iter</strong>方法，而<strong>iter</strong>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<strong>iter</strong>方法返回自身即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_func</span><span class="params">(max)</span>:</span></span><br><span class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fib_list = fib_func(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib_list:      <span class="comment">#使用for循环遍历</span></span><br><span class="line">    print(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>&#39;python算法&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/03/python%E7%AE%97%E6%B3%95/"/>
    <id>http://www.okwzh.cn/2020/06/03/python%E7%AE%97%E6%B3%95/</id>
    <published>2020-06-03T07:22:27.000Z</published>
    <updated>2020-06-03T07:37:09.140Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法（Sorting algorithm）是一种能将一串数据依照特定顺序进行排列的一种算法。</p><a id="more"></a><p>常用排序算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序(*****)</span><br><span class="line">选择排序(*****)</span><br><span class="line">插入排序</span><br><span class="line">快速排序</span><br><span class="line">希尔排序</span><br><span class="line">归并排序</span><br><span class="line">堆排序</span><br></pre></td></tr></table></figure><p>搜索是在一个项目集合中找到一个特定项目的算法过程。 </p><p>常用排序算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">顺序查找</span><br><span class="line">二分法查找（*****）</span><br><span class="line">二叉树查找</span><br><span class="line">哈希查找</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序算法（Sorting algorithm）是一种能将一串数据依照特定顺序进行排列的一种算法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://www.okwzh.cn/tags/python/"/>
    
      <category term="算法" scheme="http://www.okwzh.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>&#39;redis命令即使用&#39;</title>
    <link href="http://www.okwzh.cn/2020/06/03/redis/"/>
    <id>http://www.okwzh.cn/2020/06/03/redis/</id>
    <published>2020-06-03T01:39:25.000Z</published>
    <updated>2020-06-08T06:44:30.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h3><a id="more"></a><p>Reids官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的安装：</span></span><br><span class="line"><span class="number">1</span>).下载地址：可以在官网下载最新版本</span><br><span class="line">  <span class="number">2</span>).在该文件夹下输入cmd,进入黑窗口：<span class="string">'redis-server ./redis.windows.conf'</span>,可以看到运行效果图。基于C/S架构</span><br><span class="line">    <span class="comment">#如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略,是默认的。</span></span><br><span class="line">    <span class="number">3</span>).运行：另启动一个cmd窗口，输入<span class="string">'redis-cli'</span>,当看到<span class="string">'127.0.0.1:6379'</span>时，就可以启动成功了</span><br><span class="line">    <span class="comment">#注意：原来的reids-server窗口不能关闭，不然就无法访问服务端了。</span></span><br><span class="line">    <span class="number">4</span>).<span class="string">'127.0.0.1:6379'</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>是本机ip，<span class="number">6379</span>是Reids的服务端口，输入ping命令，返回PONG，就证明成功了。</span><br></pre></td></tr></table></figure><h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的数据类型：</span></span><br><span class="line">Redis支持五种数据类型：</span><br><span class="line">        string（字符串）  <span class="comment">#二进制安全，可以包含任何数据，最大存储512MB</span></span><br><span class="line">        hash（哈希）   <span class="comment">#键值对集合，适用于存储对象。</span></span><br><span class="line">        list（列表）   <span class="comment">#简单的字符串列表，按照插入顺序排序，</span></span><br><span class="line">        set（集合）    <span class="comment">#无序集合，时间复杂O(1),元素唯一，存在返回0</span></span><br><span class="line">        zset(sorted set：有序集合)    <span class="comment">#有序集合，不能重复，不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。</span></span><br></pre></td></tr></table></figure><h3 id="Redis的定义"><a href="#Redis的定义" class="headerlink" title="Redis的定义"></a>Redis的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的定义：</span></span><br><span class="line">redis是一个key-value存储系统。redis的操作都是原子性的，redis支持各种不同方式的排序，redis的数据都是缓存在内存中。redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</span><br></pre></td></tr></table></figure><h3 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a>Redis的优势</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis介绍：</span></span><br><span class="line">    <span class="number">1</span>).redis是使用C语言开发，支持网络，可基于内存亦可持久化的日志型key-value数据库，为开发语言提供多种API</span><br><span class="line">    <span class="number">2</span>).redis存储数据，可以将内存中的数据保存在磁盘中，重启可以再次加载。</span><br><span class="line">    <span class="number">3</span>).redis分为几种类型</span><br><span class="line">    4).redis支持数据备份，master-slave模式的数据备份--&gt;master:主人，slave：奴隶--&gt;主从模式</span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis的优势：</span></span><br><span class="line">    <span class="number">1</span>).性能极高 – Redis能读的速度是<span class="number">110000</span>次/s,写的速度是<span class="number">81000</span>次/s 。</span><br><span class="line">    <span class="number">2</span>).丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</span><br><span class="line">    <span class="number">3</span>).原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</span><br><span class="line">    <span class="number">4</span>).丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</span><br><span class="line">    </span><br><span class="line"><span class="comment">#redis的应用场景：</span></span><br><span class="line">    <span class="number">1</span>).用来做缓存 --- redis的所有数据是放在内存中（内存型的数据库） </span><br><span class="line">    <span class="number">2</span>).可以应用在某些特定的场景，比如社交类应用</span><br><span class="line">    <span class="number">3</span>).在一些大型的系统中，巧妙的实现一些特定的功能：购物车，session的共享</span><br></pre></td></tr></table></figure><h3 id="Redis的命令"><a href="#Redis的命令" class="headerlink" title="Redis的命令"></a>Redis的命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).启动redis服务器：redis-server</span><br><span class="line"><span class="number">2</span>).连接redis服务器：redis-cli</span><br><span class="line"><span class="number">3</span>).远程服务执行命令：  redis-cli -h host -p port -a password</span><br><span class="line"><span class="comment">#例：连接到主机为127.0.0.1,端口为6379,密码为123的redis服务上     redis-cli -h 127.0.0.1 -p 6379 -a '123'</span></span><br><span class="line"><span class="comment">#中文乱码：redis-cli --raw</span></span><br></pre></td></tr></table></figure><h3 id="Redis-keys命令"><a href="#Redis-keys命令" class="headerlink" title="Redis keys命令"></a>Redis keys命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).set key value   添加key值    </span><br><span class="line"><span class="number">2</span>).get key         获取key值</span><br><span class="line"><span class="number">3</span>).<span class="keyword">del</span> key         key存在，删除key值</span><br><span class="line"><span class="number">4</span>).dump key     序列化给定key，返回被序列化得值</span><br><span class="line"><span class="number">5</span>).exists key   检查key是否存在</span><br><span class="line"><span class="number">6</span>).expire key seconds(秒数)    给key设置过期时间，以秒计时</span><br><span class="line"><span class="number">7</span>).keys */key   获取key名称</span><br><span class="line"><span class="number">8</span>).persist key       取消key的过期时间，key将永久保持</span><br><span class="line"><span class="number">9</span>).ttl key  以秒为单位，返回key的剩余过期时间</span><br><span class="line"><span class="number">10</span>).randomkey从数据库随机返回一个key</span><br><span class="line"><span class="number">11</span>).rename key newkey修改key名字</span><br><span class="line"><span class="number">12</span>).type key返回key所储存的值的类型</span><br></pre></td></tr></table></figure><h3 id="Redis-string命令"><a href="#Redis-string命令" class="headerlink" title="Redis string命令"></a>Redis string命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).getrange key start end返回key中value的值，从<span class="number">0</span>开始</span><br><span class="line"><span class="number">2</span>).getset key value将oldvalue改为newvalue，返回oldvalue</span><br><span class="line"><span class="number">3</span>).mget key1 key2 key3获取多个key值</span><br><span class="line"><span class="number">4</span>).strlen key返回value的长度</span><br><span class="line"><span class="number">5</span>).mst key1 value1 key2 value2      同时设置一个或多个key-value对</span><br><span class="line"><span class="number">6</span>).append key value 将指定的 value 追加到该 key 原来值（value）的末尾。</span><br><span class="line"><span class="number">7</span>).incr key    将key中储存的数字值+<span class="number">1</span></span><br><span class="line"><span class="number">8</span>).decr key将key中储存的数字值<span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="Redis-hash命令"><a href="#Redis-hash命令" class="headerlink" title="Redis hash命令"></a>Redis hash命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> (key=hash表，field=字段，value=值)</span><br><span class="line">Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象</span><br><span class="line">    <span class="number">1</span>).hmset key filed1 value1 field2 value2   创建一个hash表key，指定字段和value</span><br><span class="line">   <span class="number">2</span>).hdel key field1 field2删除一个或多个hash表</span><br><span class="line">    <span class="number">3</span>).hexists key field1查看hash表中，指定field是否存在</span><br><span class="line">    <span class="number">4</span>).hget key field获取hash表指定字段得值</span><br><span class="line">    <span class="number">5</span>).hgetall key获取hash表所有字段和值</span><br><span class="line">    <span class="number">6</span>).hkeys key  获取hash表中的字段</span><br><span class="line">    <span class="number">7</span>).hlen key获取hash表中字段的数量</span><br><span class="line">    <span class="number">8</span>).hmget key field1 field2获取hash表中给定字段的值</span><br><span class="line">    <span class="number">9</span>).hset key field value将hash表中字段得值设为value</span><br><span class="line">    <span class="number">10</span>).hvals key 获取hash表中所有值</span><br></pre></td></tr></table></figure><h3 id="Redis-list命令"><a href="#Redis-list命令" class="headerlink" title="Redis list命令"></a>Redis list命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</span><br><span class="line">    <span class="number">1</span>).lpush key value1 value2 创建一个key列表，插入值</span><br><span class="line">   <span class="number">2</span>).lrange key start end查询key列表，从start到end之间的value</span><br><span class="line">    <span class="number">3</span>).blpop key timeout删除第一个元素，</span><br><span class="line">    <span class="number">4</span>).brpop key timeout删除最后一个元素</span><br><span class="line">    <span class="number">5</span>).lindex key index根据索引获取列表中的元素</span><br><span class="line">    <span class="number">6</span>).llen key 获取列表长度</span><br><span class="line">    <span class="number">7</span>).lpop key删除并获取第一个元素</span><br><span class="line">    <span class="number">8</span>).lpush key value1 value2将一个或多个值插入列表头部</span><br><span class="line">    <span class="number">9</span>).lpushx key value将一个值插入到已存在的列表头部</span><br><span class="line">    <span class="number">10</span>).rpop key删除列表的最后一个元素，返回删除的元素</span><br></pre></td></tr></table></figure><h3 id="Redis-set命令"><a href="#Redis-set命令" class="headerlink" title="Redis set命令"></a>Redis set命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</span><br><span class="line">Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(<span class="number">1</span>)。</span><br><span class="line">    <span class="number">1</span>).sadd key value1 value2创建一个集合，添加一个或多个值</span><br><span class="line">    <span class="number">2</span>).scard key   获取集合的值的数量</span><br><span class="line">    <span class="number">3</span>).sinter key1 key2返回给定集合的交集</span><br><span class="line">    <span class="number">4</span>).sismember key value判断value是否在集合key中</span><br><span class="line">    <span class="number">5</span>).smembers key    返回集合中的所有value</span><br><span class="line">    <span class="number">6</span>).smove key1 key2 value将value从key1集合移动到key2集合</span><br><span class="line">    <span class="number">7</span>).spop keycount随机删除key集合中的count个元素</span><br><span class="line">    <span class="number">8</span>).srandmember key count随机返回key集合中的count个元素</span><br><span class="line">    <span class="number">9</span>).srem key value1 value2删除集合中的value元素</span><br></pre></td></tr></table></figure><h3 id="Redis-set命令-1"><a href="#Redis-set命令-1" class="headerlink" title="Redis set命令"></a>Redis set命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</span><br><span class="line">不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line">有序集合的成员是唯一的,但分数(score)却可以重复。</span><br><span class="line">集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(<span class="number">1</span>)。</span><br><span class="line">  <span class="number">1</span>).zadd key(有序集合) 分数 value创建一个集合，并给出分数</span><br><span class="line">  <span class="number">2</span>).zadd key start end withscore(分数)     查询集合从start到end之间的value，带分数</span><br><span class="line">  <span class="number">3</span>).zcard key   获取有序集合和数量</span><br><span class="line">  <span class="number">4</span>).zcount key min max 计算在有序集合中指定区间分数的数量</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Redis的安装&quot;&gt;&lt;a href=&quot;#Redis的安装&quot; class=&quot;headerlink&quot; title=&quot;Redis的安装&quot;&gt;&lt;/a&gt;Redis的安装&lt;/h3&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://www.okwzh.cn/categories/redis/"/>
    
    
      <category term="redis" scheme="http://www.okwzh.cn/tags/redis/"/>
    
  </entry>
  
</feed>
